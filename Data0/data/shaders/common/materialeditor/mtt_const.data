//nopreprocess



/////////////////////////////////////////////


public static string_dat clr_vrt_rgb = s_clr_vrt_rgb;
public static string_dat clr_vrt_r = s_clr_vrt_r;
public static string_dat clr_vrt_g = s_clr_vrt_g;
public static string_dat clr_vrt_b = s_clr_vrt_b;
public static string_dat clr_vrt_a = s_clr_vrt_a;

public static string_dat clr_vrt_rgb_inv = "(1.0 - " + clr_vrt_rgb + ")";
public static string_dat clr_vrt_r_inv = "(1.0 - " + clr_vrt_r + ")";
public static string_dat clr_vrt_g_inv = "(1.0 - " + clr_vrt_g + ")";
public static string_dat clr_vrt_b_inv = "(1.0 - " + clr_vrt_b + ")";
public static string_dat clr_vrt_a_inv = "(1.0 - " + clr_vrt_a + ")";

public static int_dat CULL_DEF = -1;

public static bool_dat b_lightpass_on_def = true;

public static float_dat adf_min_def = 0.0;
public static float_dat adf_max_def = 1.0;


public static int_dat material_id_def = 0;
public static int_dat material_id_none = -1;
public static int_dat material_id_srf_def = -1;
public static string_dat s_material_sub_def = "0";

public static float_dat f_srf_scale_def_obj = 1.0;

public static int_dat e_usr_clr_idx_def = -1;
public static int_dat e_msk_idx_def = -1;

public static bool_dat b_clr_vrt_on_def = false;



public static int regs_number = 32;
public static int mtx_number = 16;

public static float_dat f_alpha_def = 1.0;
public static string_dat __alpha_def = __none;


public static int_dat tangent_space = 0;
public static int_dat world_space = 1;

public static int_dat e_mat_sub_filter_def = LINEAR_MIP_POINT;
public static int_dat e_msk_filter_def = ANISOTROPIC_MIP_POINT;


public static string_dat s_uv_coord_0 = "uv_coord_0";
public static string_dat s_uv_coord_1 = "uv_coord_1";
public static string_dat s_uv_coord_2 = "uv_coord_2";
public static string_dat s_uv_coord_3 = "uv_coord_3";
public static string_dat s_uv_coord_4 = "uv_coord_4";
public static string_dat s_uv_coord_5 = "uv_coord_5";
public static string_dat s_uv_coord_6 = "uv_coord_6";
public static string_dat s_uv_coord_7 = "uv_coord_7";
public static string_dat s_uv_coord_8 = "uv_coord_8";
public static string_dat s_uv_coord_9 = "uv_coord_9";
public static string_dat s_uv_coord_10 = "uv_coord_10";
public static string_dat s_uv_coord_11 = "uv_coord_11";
public static string_dat s_uv_coord_12 = "uv_coord_12";
public static string_dat s_uv_coord_13 = "uv_coord_13";
public static string_dat s_uv_coord_14 = "uv_coord_14";
public static string_dat s_uv_coord_15 = "uv_coord_15";

public static string_dat s_clr_usr_coord_0 = "clr_usr_coord_0";
public static string_dat s_clr_usr_coord_1 = "clr_usr_coord_1";
public static string_dat s_clr_usr_coord_2 = "clr_usr_coord_2";
public static string_dat s_clr_usr_coord_3 = "clr_usr_coord_3";                                                

public static string_dat s_clr_usr_texture_def = s_tex_def;
public static string_dat s_clr_usr_offset_def = "v_clr_usr_attrib.x";

public static string_dat s_clr_usr_0_rgba = "$s_clr_usr_0_sampler$";
public static string_dat s_clr_usr_0 = s_clr_usr_0_rgba + ".rgb";
public static string_dat s_clr_usr_0_rgb = s_clr_usr_0;
public static string_dat s_clr_usr_0_r = s_clr_usr_0 + ".r";
public static string_dat s_clr_usr_0_g = s_clr_usr_0 + ".g";
public static string_dat s_clr_usr_0_b = s_clr_usr_0 + ".b";
public static string_dat s_clr_usr_0_a = s_clr_usr_0 + ".a";

public static string_dat s_clr_usr_1_rgba = "$s_clr_usr_1_sampler$";
public static string_dat s_clr_usr_1 = s_clr_usr_1_rgba + ".rgb";
public static string_dat s_clr_usr_1_rgb = s_clr_usr_1;
public static string_dat s_clr_usr_1_r = s_clr_usr_1 + ".r";
public static string_dat s_clr_usr_1_g = s_clr_usr_1 + ".g";
public static string_dat s_clr_usr_1_b = s_clr_usr_1 + ".b";
public static string_dat s_clr_usr_1_a = s_clr_usr_1 + ".a";

public static string_dat s_clr_usr_2_rgba = "$s_clr_usr_2_sampler$";
public static string_dat s_clr_usr_2 = s_clr_usr_2_rgba + ".rgb";
public static string_dat s_clr_usr_2_rgb = s_clr_usr_2;
public static string_dat s_clr_usr_2_r = s_clr_usr_2 + ".r";
public static string_dat s_clr_usr_2_g = s_clr_usr_2 + ".g";
public static string_dat s_clr_usr_2_b = s_clr_usr_2 + ".b";
public static string_dat s_clr_usr_2_a = s_clr_usr_2 + ".a";

public static string_dat s_clr_usr_3_rgba = "$s_clr_usr_3_sampler$";
public static string_dat s_clr_usr_3 = s_clr_usr_3_rgba + ".rgb";
public static string_dat s_clr_usr_3_rgb = s_clr_usr_3;
public static string_dat s_clr_usr_3_r = s_clr_usr_3 + ".r";
public static string_dat s_clr_usr_3_g = s_clr_usr_3 + ".g";
public static string_dat s_clr_usr_3_b = s_clr_usr_3 + ".b";
public static string_dat s_clr_usr_3_a = s_clr_usr_3 + ".a";



public static string_dat s_falloff_vs_in = "f_falloff_vs_in";
public static string_dat s_falloff_vs_in_1 = s_falloff_vs_in + "_1";
public static string_dat s_falloff_vs_in_2 = s_falloff_vs_in + "_2";
public static string_dat s_falloff_vs_in_3 = s_falloff_vs_in + "_3";
public static string_dat s_falloff_vs_in_4 = s_falloff_vs_in + "_4";

public static string_dat s_falloff_vs_out = "f_falloff_vs_out";
public static string_dat s_falloff_vs_out_1 = s_falloff_vs_out + "_1";
public static string_dat s_falloff_vs_out_2 = s_falloff_vs_out + "_2";
public static string_dat s_falloff_vs_out_3 = s_falloff_vs_out + "_3";
public static string_dat s_falloff_vs_out_4 = s_falloff_vs_out + "_4";

public static string_dat swizzle_r = "r";
public static string_dat swizzle_g = "g";
public static string_dat swizzle_b = "b";
public static string_dat swizzle_a = "a";
public static string_dat swizzle_rgb = "rgb";
public static string_dat swizzle_rgba = "rgba";

public static float_dat c_f1_cst_def = 0.0; 
public static vec3_dat c_v3_cst_def = vec(0.0, 0.0, 0.0);
public static vec4_dat c_v4_cst_def = vec(0.0, 0.0, 0.0, 0.0);

public static string_dat __lit_def = "v_lit * v_clr_out.xyz";


public string_dat s_pass = "pass";

public static string_dat const_0 = "CONST_0";
public static string_dat const_0_srgb = "FLOAT4(pow(CONST_0.xyz, (SwizzleXXX(2.2))), CONST_0.w)";

public static string_dat const_1 = "CONST_1";
public static string_dat const_1_srgb = "FLOAT4(pow(CONST_1.xyz, (SwizzleXXX(2.2))), CONST_1.w)";

public static string_dat const_2 = "CONST_2";
public static string_dat const_2_srgb = "FLOAT4(pow(CONST_2.xyz, (SwizzleXXX(2.2))), CONST_2.w)";

public static string_dat const_3 = "CONST_3";
public static string_dat const_3_srgb = "FLOAT4(pow(CONST_3.xyz, (SwizzleXXX(2.2))), CONST_3.w)";

public static string_dat const_4 = "CONST_4";
public static string_dat const_4_srgb = "FLOAT4(pow(CONST_4.xyz, (SwizzleXXX(2.2))), CONST_4.w)";

public static string_dat const_5 = "CONST_5";
public static string_dat const_5_srgb = "FLOAT4(pow(CONST_5.xyz, (SwizzleXXX(2.2))), CONST_5.w)";

public static string_dat const_6 = "CONST_6";
public static string_dat const_6_srgb = "FLOAT4(pow(CONST_6.xyz, (SwizzleXXX(2.2))), CONST_6.w)";

public static string_dat const_7 = "CONST_7";
public static string_dat const_7_srgb = "FLOAT4(pow(CONST_7.xyz, (SwizzleXXX(2.2))), CONST_7.w)";

public static string_dat const_8 = "CONST_8";
public static string_dat const_8_srgb = "FLOAT4(pow(CONST_8.xyz, (SwizzleXXX(2.2))), CONST_8.w)";

public static string_dat const_9 = "CONST_9";
public static string_dat const_9_srgb = "FLOAT4(pow(CONST_9.xyz, (SwizzleXXX(2.2))), CONST_9.w)";

public static int_dat FORCE_DEPTH_OFF = -1;


public static int_dat e_lidx_tex_size_nrm_def = -1;
                                              
public string_dat morph_factor()
{
    return GetMorphFactor();
}

public string_dat mf_noise(string_dat _noise)
{
    return GetMorphFactorNoise(_noise);
}

public string_dat mf_msk_noise(string_dat _msk, string_dat _noise)
{
    return GetMorphFactorMskNoise(_msk, _noise);
}

public string_dat mwf_msk(string_dat _msk)
{
    return GetMorphWFactor(_msk);
}

public string_dat GetMorphFactorNoise(string_dat _noise)
{
    string_dat __lerp_morph_factor = GetMorphFactor();        
    __lerp_morph_factor = If((_noise != __none) & (__lerp_morph_factor != "0.0"),
            "saturate(smoothstep(0, 1, saturate((( " + __lerp_morph_factor + " * " + __lerp_morph_factor  + " + (" + __lerp_morph_factor +  " > 0.0) * " + _noise + " * " + _noise + " ) * 2 ) - 1)))",
            __lerp_morph_factor );
    return __lerp_morph_factor;
}

public string_dat GetMorphFactorMskNoise(string_dat _msk, string_dat _noise)
{
    string_dat __lerp_morph_factor = _msk;
    __lerp_morph_factor = If((_noise != __none) & (__lerp_morph_factor != __none),
            "saturate(smoothstep(0, 1, saturate((( " + __lerp_morph_factor + " * " + __lerp_morph_factor  + " + (" + __lerp_morph_factor +  " > 0.0) * " + _noise + " * " + _noise + " ) * 2 ) - 1)))",
            __lerp_morph_factor );
    return __lerp_morph_factor;
}

public string_dat GetMorphFactor()     
{
    int_dat MATERIAL_FLAGS = DeclareExtern_int("MATERIAL_FLAGS");
    string_dat res = If(BitAND(MATERIAL_FLAGS, MF_MORPHING) != 0, "saturate(" + s_mph_y + ")", "0.0");        
    return res;
} 


public string_dat GetMorphWFactor(string_dat _msk)     
{
    return "dot(CONST_4, " + _msk + ")";
} 
                                         


public string_dat adf( string_dat __msk, string_dat _min, string_dat _max)
{           
    return "saturate(((" + __msk + ") - (" + _min + ")) / ((" + _max + ") - (" + _min + ")))";
}


public float_dat adf_max(float_dat _min, float_dat _max )
{
    return 1.0 / (_max - _min);
}

public float_dat adf_min(float_dat _min, float_dat _max )
{
    return -_min * _max;
}


public static string_dat AlphaDistanceField ( string_dat __msk, string_dat  cst_min, string_dat cst_max)
{
    return "saturate(" + __msk + " * " + cst_max + " + " + cst_min + ")";    
}

public string_dat NormalReconstruct(string_dat _normal_xy)
{
    string_dat_F2 __nrm_ts_xy =  "(" + _normal_xy + " * 2.0 - 1.0)";
    string_dat_F1 __nrm_ts_z = "sqrt(1.0 - dot(" + __nrm_ts_xy + ", " + __nrm_ts_xy + "))";   
    string_dat_F3 __nrm_ts = "half3(" +__nrm_ts_xy + ", " + __nrm_ts_z + ")";
    return __nrm_ts;
}

public string_dat NormalReconstruct(string_dat _normal_xy, Const _nrm_scaling)
{
    string_dat_F2 __nrm_ts_xy =  "(" + _normal_xy + " * 2.0 - 1.0)";
    string_dat_F1 __nrm_ts_z = "sqrt(1.0 - dot(" + __nrm_ts_xy + ", " + __nrm_ts_xy + "))";
    __nrm_ts_xy = If((float_dat)_nrm_scaling.Data != 1.0f, __nrm_ts_xy + " * " + _nrm_scaling, __nrm_ts_xy );
    string_dat_F3 __nrm_ts = "half3(" +__nrm_ts_xy + ", " + __nrm_ts_z + ")";
    return __nrm_ts;
}




public base_dat ValFromTab(int_dat _idx, base_dat[] _tab, int _length, base_dat _init_val)
{
    base_dat out_val = _init_val;      
    
    
    if(!_idx.IsExt)
    {        
        int idx = (int)_idx.IntData;
        out_val = (idx >= 0 && idx < _length ) ? _tab[idx] : __none;
    }   
    

    if(_idx.IsExt)
    {    
        for(int idx = 0; idx < _length; idx++)
        {
            out_val = If(_idx == idx, _tab[idx], out_val);
        }                       
    }
    
    return out_val;
   
}


public bool_dat ContainsStringScript(string_dat _pattern, params string_dat[] _code )
{
    bool_dat res = false;
    foreach(string_dat code in _code)
    {        
        res = res | substr(code,_pattern);                
    }
    
    return res;
}


public string_dat decal_offset()
{    
    string_dat_F3 __cam_dir_ws = "CAMERA_POS_WS.xyz - v_pos_ws.xyz";
    string_dat_F3 __cam_dir_n_ws = "normalize(" + __cam_dir_ws + ")";
    string_dat_F1 __cam_dir_length = "length(" + __cam_dir_ws + ")";
    return "(saturate(" + __cam_dir_length  + " * 0.05) * v_nrm_ws * saturate(dot(" + __cam_dir_n_ws + ", v_nrm_ws)) + v_pos_ws.xyz)";    
}      


public void CopyFields(object _src, object _dst)
{   
    System.Reflection.FieldInfo[] fis_src = _src.GetType().GetFields();      

    foreach(System.Reflection.FieldInfo fi in fis_src)
    {     
        System.Reflection.FieldInfo fi_dst = _dst.GetType().GetField(fi.Name);
        if(fi_dst != null)
        {
            object val_src =  fi.GetValue(_src);   
            fi_dst.SetValue(_dst, val_src);
        }
    }    
}    


public void MarkStencilDynamic()
{
	StencilOp(STENCIL_KEEP, STENCIL_KEEP, STENCIL_REPLACE);
    StencilFunc(ALWAYS, i_stencil_dynamic, 255);
    StencilWriteMask(i_stencil_dynamic);
    StencilEnable(true);
}

public vec4_dat Gamma_Decode(vec4_dat _v)
{
	return pow(_v, 2.2);
}

public vec3_dat Gamma_Decode(vec3_dat _v)
{
	return pow(_v, 2.2);
}

public float_dat Gamma_Decode(float_dat _v)
{
	return pow(_v, 2.2);
}

public vec4_dat Gamma_Encode(vec4_dat _v)
{
	return pow(_v, 1.0 / 2.2);
}

public vec3_dat Gamma_Encode(vec3_dat _v)
{
	return pow(_v, 1.0 / 2.2);
}

public float_dat Gamma_Encode(float_dat _v)
{
	return pow(_v, 1.0 / 2.2);
}


////////////////////////////////////////////////////////////////////////////////////

public void BeginTechNew()
{    
    SetShaderPathNew();
    SetShaderFlagsNew();
}

public void SetShaderPathNew()
{
    int_dat SHADER_PATH = DeclareExtern_int("SHADER_PATH");   

    if(SHADER_PATH == SM30) 
    {        
        Define( "SHADER_PATH_DX9", SHADER_PATH ); 
    }
    if(SHADER_PATH == SM31) 
    {         
        Define( "SHADER_PATH_X360", SHADER_PATH );
    }
    if(SHADER_PATH == SM32) 
    {        
        Define( "SHADER_PATH_PS3", SHADER_PATH );                   
    }        
    if(SHADER_PATH == SM40) 
    { 
        Define("SHADER_PATH_DX10", SHADER_PATH); 
    }
    if(SHADER_PATH == SM41) 
    { 
        Define("SHADER_PATH_WIIU", SHADER_PATH); 
    }
    if(SHADER_PATH == SM50) 
    { 
        Define("SHADER_PATH_DX11", SHADER_PATH); 
    }
	if(SHADER_PATH == SM51) 
    { 
        Define("SHADER_PATH_ORBIS", SHADER_PATH); 
		Define("SHADER_PATH_DX11", SHADER_PATH); 
    }
	if(SHADER_PATH == SM52) 
    { 
        Define("SHADER_PATH_DURANGO", SHADER_PATH); 
		Define("SHADER_PATH_DX11", SHADER_PATH); 
    }
	if(SHADER_PATH == SM53)
	{
	    Define("SHADER_PATH_OPENGL", SHADER_PATH); 
	}
}        

public void SetPS3Features()
{   
    int_dat MATERIAL_FLAGS = DeclareExtern_int("MATERIAL_FLAGS");   
    int_dat SHADER_PATH = DeclareExtern_int("SHADER_PATH");   
    
    if(BitAND(MATERIAL_FLAGS, MF_MORPH_TARGETS) != 0)
    {
        features(FT_MORPH_TARGETS);
    }
    
    
    if((BitAND(MATERIAL_FLAGS, MF_SKINNING) != 0) | (BitAND(MATERIAL_FLAGS, MF_SKINNING_ONE_BONE) != 0)) 
    {
        features(FT_SKINNING);
    }                   
   
    
    //features(FT_MORPHING_PS);
} 

public void SetShaderFlagsNew()
{
    int_dat MATERIAL_FLAGS = DeclareExtern_int("MATERIAL_FLAGS");   
    int_dat SHADER_PATH = DeclareExtern_int("SHADER_PATH");

    bool_dat PS3_SVP = (BitAND(MATERIAL_FLAGS, MF_SOFTWARE_VP) != 0) & (SHADER_PATH == SM32);        

    if(PS3_SVP)
    {
        Define("REQ_PS3_SVP", 1);
    }    
        
    if(BitAND(MATERIAL_FLAGS, MF_MORPH_TARGETS) != 0)
    {            
        if((SHADER_PATH == SM31) | (SHADER_PATH == SM40) | (SHADER_PATH == SM50) | (SHADER_PATH == SM51) | (SHADER_PATH == SM52) | (SHADER_PATH == SM53))
        {
            Define( "REQ_MORPH_TARGETS", 1);
            Define( "VERTEXMORPHING_CONSTNUM", iVertexMorphing_Const_Num); 

			if(SHADER_PATH != SM31)
			{
				VTMU("s_MorphTargets")
				{
					UserBuffer(0);
				}
			}        
        }
    }
    
    
    if((BitAND(MATERIAL_FLAGS, MF_SKINNING) != 0) | (BitAND(MATERIAL_FLAGS, MF_SKINNING_ONE_BONE) != 0)) 
    {
        if(PS3_SVP)
        {                
            Define( "REQ_WORLD_SPACE", 1);    
            Define( "VERTEXBLENDING_CONSTNUM", iVertexBlending_Const_Num);               
            
        }
                
    
        if(!PS3_SVP)
        {            
            if(BitAND(MATERIAL_FLAGS, MF_SKINNING) != 0) 
            {
                Define( "REQ_SKINNING", 1);
            }
            
            if(BitAND(MATERIAL_FLAGS, MF_SKINNING_ONE_BONE) != 0)
            {
                Define( "REQ_SKINNING_ONE_BONE", 1);
            }            
            
            if((BitAND(MATERIAL_FLAGS, MF_MORPH_TARGETS) != 0) & (SHADER_PATH == SM31))
            {                                 
                Define( "VERTEXBLENDING_CONSTNUM", iVertexBlending_Const_Num - (iVertexMorphing_Const_Num * 2 + 1));                     
            }                 
            
            if(!((BitAND(MATERIAL_FLAGS, MF_MORPH_TARGETS) != 0) & (SHADER_PATH == SM31)))
            {
                Define( "VERTEXBLENDING_CONSTNUM", iVertexBlending_Const_Num);
            }
        }            
    }	

}   


  

