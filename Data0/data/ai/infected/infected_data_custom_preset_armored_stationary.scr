!include("ai_data.def")
!include("ai_timing.def")
// armored is not using base nor random data sets!
!include("infected_data_params.scr")
!include("export_armored_params.scr")

// armored

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////// DATA ///////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

//###############
//#### DYING ####
//###############
//## die:pose:damage_type:body_part:direction:death_type
//###############

Data("die:standing:::::::", -2, "armored_death_01", -1, 1)

Data("idle:standing::explode:::", -2,   "armored_explosive_reaction_01", -1, 1)
Data("idle:standing::explode:::", -2,   "armored_explosive_reaction_02", -1, 1)



//#######################
//#### HIT REACTIONS ####
//#######################
//## hit_reaction:pose:hit_reaction:item_type:damage_type:attacker_pos:body_part:direction:severity
//#######################

Data("hit_reaction:standing:pain::all:rear:::", -2, "armored_hitreaction_back_light", -1, 1)
Data("hit_reaction:standing:pain::all:rear:::", -2, "armored_hitreaction_front_light", -1, 1)

Data("hit_reaction:standing:pain::all:::forward:", -2, "armored_hitreaction_back_light", -1, 1)
Data("hit_reaction:standing:pain::all:::forward:", -2, "armored_hitreaction_front_light", -1, 1)

Data("hit_reaction:standing:pain::all:::backward:", -2, "armored_hitreaction_back_light", -1, 1)
Data("hit_reaction:standing:pain::all:::up:", -2, "armored_hitreaction_back_light", -1, 1)
Data("hit_reaction:standing:pain::all:::forward:", -2, "armored_hitreaction_front_light", -1, 1)
Data("hit_reaction:standing:pain::all:::down:", -2, "armored_hitreaction_front_light", -1, 1)
Data("hit_reaction:standing:pain::all:::left:", -2, "armored_hitreaction_left_light", -1, 1)
Data("hit_reaction:standing:pain::all:::right:", -2, "armored_hitreaction_right_light", -1, 1)
//////////////////////////////////////
////////////////temporary
Data("hit_reaction:standing:react_on_charge::all:front:::", -2, "armored_hitreaction_front_light", -1, 1) //done
Data("hit_reaction:standing:react_on_charge::all:left:::", -2, "armored_hitreaction_right_light", -1, 1) //done
Data("hit_reaction:standing:react_on_charge::all:right:::",-2, "armored_hitreaction_left_light", -1, 1) //done - staje w powietrzu
Data("hit_reaction:standing:react_on_charge::all:rear:::", -2, "armored_hitreaction_back_light", -1, 1)
Data("hit_reaction:standing:react_on_charge::all:rear:::", -2, "armored_hitreaction_front_light", -1, 1)


Data("hit_reaction:standing:react_on_tackle::all:front:::", -2, "armored_hit_reaction_front_hard", -1, 1)
Data("hit_reaction:standing:react_on_tackle::all:left:::", -2, "armored_hit_reaction_left_medium", -1, 1)
Data("hit_reaction:standing:react_on_tackle::all:right:::",-2, "armored_hit_reaction_right_medium", -1, 1)
Data("hit_reaction:standing:react_on_tackle::all:rear:::", -2, "armored_hit_reaction_back_hard", -1, 1)

Data("hit_reaction:standing:react_on_wrestle_kick::all:front:::", -2, "armored_hit_reaction_front_hard", -1, 1)
Data("hit_reaction:standing:react_on_wrestle_kick::all:left:::", -2, "armored_hit_reaction_left_medium", -1, 1)
Data("hit_reaction:standing:react_on_wrestle_kick::all:right:::",-2, "armored_hit_reaction_right_medium", -1, 1)
Data("hit_reaction:standing:react_on_wrestle_kick::all:rear:::", -2, "armored_hit_reaction_back_hard", -1, 1)

Data("hit_reaction:standing:react_on_ground_pound::all:front:::", -2, "armored_hit_reaction_ground_pound", -1, 1)
Data("hit_reaction:standing:react_on_ground_pound::all:left:::", -2, "armored_hit_reaction_ground_pound", -1, 1)
Data("hit_reaction:standing:react_on_ground_pound::all:right:::", -2, "armored_hit_reaction_ground_pound", -1, 1)
Data("hit_reaction:standing:react_on_ground_pound::all:rear:::", -2, "armored_hit_reaction_ground_pound", -1, 1)




//#############################
//#### COLLISION REACTIONS ####
//#############################
//## collision_reaction:pose:direction:item_type:severity
//#######################

Data("collision_reaction:standing:left::light", -2, "armored_wall_hit_left", -1, 1)
Data("collision_reaction:standing:right::light", -2, "armored_ram_start_right", -1, 1)
Data("collision_reaction:standing:backward::light", -2, "armored_wall_hit_back", -1, 1)

Data("collision_reaction:standing:::", -2, "armored_stunned", -1, 1)

//##############
//#### IDLE ####
//##############
//## idle:pose:idle_type:item_type:scare_level:is_idle_prepare:is_idle_finish
//##############

Data("idle:standing::stand:none:none:none", -2, "armored_idle_01", -1, 1)
Data("idle:standing::stand:none:none:none", -2, "armored_idle_02", -1, 1)

//##################
//#### ALARMING ####
//##################
//## alarming:is_standing:alarm_level
//##################

//Data("alarming:standing::alarmed:::false", 1.0, "mz_a_calm_stand_idle_v01", -1, 1)

//################
//#### ATTACK ####
//################
//## attack:is_standing:item_type:attack_type:attack_dir:attack_range:is_defending_head:is_holding
//################

Data("attack:standing::left_arm_strike:::", -2, "armored_armstrike_left", -1, 1)

Data("attack:standing::right_arm_strike:::", -2, "armored_armstrike_right", -1, 1)

Data("attack:standing::attack_round:::", -2, "armored_attack_360", -1, 1)
Data("attack:standing::attack_round:::", -2, "armored_attack_360_fast", -1, 1)

Data("attack:standing::taunt:::", -2, "armored_taunt", -1, 1)

Data("attack:standing::fake_low:::", -2, "armored_fake_melee_attack", -1, 1)
Data("attack:standing::fake_high:::", -2, "armored_fake_melee_attack", -1, 1)

Data("attack:standing::object_throw:::", -2, "armored_car_throw_in_place", -1, 1)

Data("attack:standing::fake_high:::", -2, "armored_angry_loop_v01", -1, 1)
Data("attack:standing::fake_high:::", -2, "armored_angry_loop_v02", -1, 1)

// used if heard sound but no good target's been found
Data("attack:standing::confusion:::", -2, "armored_idle_01", -1, 1)
Data("attack:standing::confusion:::", -2, "armored_idle_02", -1, 1)

Data("attack:standing::throw_projectile:::", -2, "armored_heavy_object_throw", -1, 1)

//##################
//#### MOVEMENT ####
//##################
//## movement:is_standing:movement_type:movement_direction:alarm_level:item_type:ram_type:stairs_climbing_state
//##################

Data("movement:standing:walk:forward::::", -2, "armored_walk", -1, 1)
Data("movement:standing:trot:forward::::", -2, "armored_walk", -1, 1)
Data("movement:standing:run:forward::::", -2, "armored_walk", -1, 1)

Data("movement:standing:berserker_ram:forward:alarmed:::", -2, "armored_ram", -1, 1)
Data("movement:standing:berserker_ram_end:forward:alarmed:::", -2, "armored_ram_stop", -1, 1)
Data("movement:standing:berserker_ram_exhausted:forward:alarmed:::", -2, "armored_ram_exhausted", -1, 1)

//####################
//#### TRANSITION ####
//####################
//## movement:pose:source_movement_type:dest_movement_type:source_flags:dest_flags
//##################

Data("transition:standing:walk:berserker_ram", -2, "armored_ram_from_walk", -1, 1)
Data("transition:standing:run:berserker_ram", -2, "armored_ram_from_walk", -1, 1)
Data("transition:standing:trot:berserker_ram", -2, "armored_ram_from_walk", -1, 1)

//##############
//#### TURN ####
//##############
//## turn:is_standing:alarm_level:item_type:direction:angle
//##############

Data("turn:standing:::left:45", -2, "armored_turn_l45", -1, 1)
Data("turn:standing:::right:45", -2, "armored_turn_r45", -1, 1)

Data("turn:standing:::left:90", -2, "armored_turn_l90", -1, 1)
Data("turn:standing:::right:90", -2, "armored_turn_r90", -1, 1)

Data("turn:standing:::left:180", -2, "armored_turn_l180", -1, 1)
Data("turn:standing:::right:180", -2, "armored_turn_r180", -1, 1)

//###############
//#### START ####
//###############
//## start:is_standing:alarm_level:item_type:movement_type:angle:direction
//##############

Data("start:standing::::90:left:", -2, "armored_walk_start_l90", -1, 1)
Data("start:standing::::90:right:", -2, "armored_walk_start_r90", -1, 1)
Data("start:standing::::0::", -2, "armored_walk_start", -1, 1)
Data("start:standing::::180:left:", -2, "armored_walk_start_l180", -1, 1)
Data("start:standing::::180:right:", -2, "armored_walk_start_r180", -1, 1)

Data("start:standing:::berserker_ram:0::", -2, "armored_ram_start", -1, 1)
Data("start:standing:::berserker_ram:90:right:", -2, "armored_ram_start_right", -1, 1)
Data("start:standing:::berserker_ram:90:left:", -2, "armored_ram_start_left", -1, 1)
Data("start:standing:::berserker_ram:180:right:", -2, "armored_ram_start_backright", -1, 1)
Data("start:standing:::berserker_ram:180:left:", -2, "armored_ram_start_backleft", -1, 1)

Data("idle:standing::confused:::", -2, "armored_stunned_in_place", -1, 1)

//##############
//#### STOP ####
//##############
//## stop:is_standing:alarm_level:item_type:movement_type:angle:direction
//##############

Data("stop:standing:::berserker_ram:0::false:", -2, "armored_ram_stop", -1, 1)

Data("stop:standing::::90:left:false:", -2, "armored_walk_stop_l90", -1, 1)
Data("stop:standing::::90:right:false:", -2, "armored_walk_stop_r90", -1, 1)
Data("stop:standing::::0::false:", -2, "armored_walk_stop_F", -1, 1)
Data("stop:standing::::180:left:false:", -2, "armored_walk_stop_l180", -1, 1)
Data("stop:standing::::180:right:false:", -2, "armored_walk_stop_r180", -1, 1)


///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// CURVES //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Curve(CURVE_KO_PROBABILITY, "zombie_ko_prob_thug")
Curve(CURVE_COUNTER_ATTACK_PROB, "zombie_counter_attack_prob")
Curve(CURVE_HEALTH, "armored_health")
Curve(CURVE_MELEE_DAMAGE, "armored_melee_damage")

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// PARAMETERS ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

ParamFloat("turn_speed", 240.0)
ParamFloat("medium_severity_threshold", 101.0) //disabled medium hit severity
ParamFloat("heavy_severity_threshold", 101.0) //disabled heavy hit severity
ParamBool("always_react_on_kick", 0)
ParamFloat("decapitation_prob", 0.0)
ParamFloat("berserker_hit_prob", 0.0)
ParamFloat("berserker_grab_prob", 0.0)
ParamFloat("berserker_ram_prob", 100.0)
ParamFloat("xp_factor", 5.0)
ParamFloat("berserker_ram_dist", 13.0) //converted
ParamFloat("berserker_ram_min_dist", 4.0) //converted
ParamBool("can_fall", 0)									//When 0 AI does not receive damage to stamina
ParamBool("can_react_on_hit", 1)
ParamBool("can_attack_from_move", 0)
ParamBool("fast_sprint_during_pursuit", 0)
ParamFloat("melee_range", 2.2)
ParamFloat("melee_range_y", 1.7)
ParamFloat("bite_range", 1.2)
//ParamFloat("bite_damage_mul", 0.65)
ParamFloat("min_time_btw_attack_from_stand_attempts", 1.0)    // min time (spawner borders) between grab attempts (0 in the center of normal spawner)
ParamFloat("max_time_btw_attack_from_stand_attempts", 1.0)   // max time (spawner borders) between grab attempts (a distance from normal spawner)
ParamFloat("time_btw_ram_berserkers", 0.0)                  // time between possible occurance of ram berserker attacks
ParamProb("taunt_prob", 0, 1)
ParamFloat("taunt_prob_on_target_change", 0.0)
ParamFloat("taunt_prob_on_alarm_level_change", 1.0)

//ParamFloat("damage_mul", 1.0)
ParamFloat("damage_mul_vs_other_ai", 2.0)
ParamFloat("physics_damage", 3.0)
ParamFloat("experience_award", 0.0)
ParamInt("max_severity", 1)
ParamFloat("min_time_btw_hit_reactions", 3.0)
ParamBool("force_counter_on_kick", 1)
ParamFloat("counter_attack_from_stand_prob_mul", 0.0)
ParamFloat("counter_push_prob_mul", 0.0)
ParamFloat("counter_combo_prob_mul", 0.0)
ParamInt("zombie_type", 11)
ParamFloat("max_dist_to_stinger", 12.5) //converted
ParamFloat("confusion_prob_mod", 0.0)
ParamBool("can_strike_from_stand", 0)
ParamBool("can_move_turn", 0)
ParamBool("use_intermediate_point", 0)
ParamBool("directional_collision_reactions", 1)
ParamFloat("ellipsoid_size_mul", 1.5)
ParamFloat("ram_damage_mul", 2.5)					//amount of damage dealt when ramming player, based on armored_melee_damage
ParamFloat("min_time_btw_hit_reactions", 3.0)
ParamFloat("move_time_before_berserker", 1.5)
ParamFloat("dist_to_chase_beyond_wander_dist", 15.0)
ParamFloat("static_path_node_radius", 0.6) //converted
ParamFloat("ram_turn_speed_limit_far", 100.0)
ParamFloat("ram_turn_speed_limit_close", 20.0)
ParamFloat("ram_close_dist", 3.5) //converted
ParamBool("navigate_through_generic_nav_mesh_connections", 0)
ParamBool("navigate_through_user_nav_mesh_connections", 0)
ParamFloat("full_angle_sight_range", 30.0) // don't let armored loose player too easy
ParamFloat("max_pitch_angle", 7.0)

ParamBool("can_throw_projectile", 1)
ParamString("projectile_name", "Throwable_Rock")
ParamString("projectile_origin_elem", "R_HandHolder")
ParamFloat("throw_projectile_min_range", 2.0)
ParamFloat("throw_projectile_max_range", 75.0)
ParamFloat("throw_projectile_min_range_when_unreacheable", 2.0)
ParamFloat("throw_projectile_speed", 15.0)
ParamFloat("throw_projectile_prediction_accuracy", 0.0) // 0 - min accuracy (no prediction), 1 - max accuracy
ParamFloat("min_time_btw_throws_projectile", 1.0)
ParamFloat("throw_projectile_max_accuracy_range", 15.0)
ParamFloat("throw_projectile_accuracy_degradation_dist", 5.0)

ParamInt("consecutive_berserkers_min", 0) // min consecutive berserkers (one player)
ParamInt("consecutive_berserkers_max", 0) // max consecutive berserkers (4 players in coop)

//HEALTH & STAMINA & DAMAGE
//ParamFloat("health_mul", 1.0)
//ParamFloat("stamina_regeneration_rate", 0.08)
//ParamFloat("stamina_mul", 1.0)

//ParamFloat("head_health_influence", 1.0)
//ParamFloat("left_arm_health_influence", 1.0)
//ParamFloat("right_arm_health_influence", 1.0)
//ParamFloat("left_leg_health_influence", 1.0)
//ParamFloat("right_leg_health_influence", 1.0)
//ParamFloat("torso_front_health_influence", 1.0)
//ParamFloat("torso_back_health_influence", 1.0)

//ParamFloat("head_damage_factor", 1.0)					//amount of damage dealt to head
//ParamFloat("left_arm_damage_factor", 1.0)				//amount of damage dealt to arm
//ParamFloat("right_arm_damage_factor", 1.0)				//amount of damage dealt to arm
//ParamFloat("left_leg_damage_factor", 1.0)				//amount of damage dealt to leg
//ParamFloat("right_leg_damage_factor", 1.0)				//amount of damage dealt to leg

ParamFloat("death_anim_prob", 1.0)

ParamFloat("round_attack_prob", 0.0)

ParamFloat("humanity_hit_reaction_prob", 0.0)
ParamBool("has_glowing_eyes", 0)

ParamFloat("health_mul_min_to_play_burn_reaction", 0.2)
ParamFloat("health_perc_below_elem_impact_blow_on", 0.2)
ParamFloat("health_perc_below_elem_paralyze_on", 0.2)

ParamBool("can_land", 0)
ParamFloat("ram_physics_damage", 50.0)
ParamBool("play_reaction_on_elementals", 0)

ParamBool("react_on_hit_in_armor", 0)

ParamFloat("experience_award", 750.0)
ParamFloat("fall_on_wrestle_kick_prob", 0.0)
ParamBool("get_extra_damage_after_wall_special_hit", 0)

ParamBool("visual_electrocution_effect", 1)

ParamFloat("bullet_head_hit_damage_mult", 0.2)

ParamFloat("coop_damage_mul_2", 1.2) // damage multiplayer for 2 players coop
ParamFloat("coop_damage_mul_3", 1.4) // damage multiplayer for 3 players coop
ParamFloat("coop_damage_mul_4", 1.8) // damage multiplayer for 4 players coop

ParamFloat("vehicle_physics_damage", 800.0)
ParamBool("can_attack_objects_from_move", 0)

ParamFloat("get_in_vehicle_give_damage_mult", 0.5)