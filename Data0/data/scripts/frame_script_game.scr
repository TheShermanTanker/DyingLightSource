import "frame_script_def.scr"

sub weather_modify()
{
	extern float f_pp_game_weather;
	extern float f_game_zombie_vision;
	Set("f_pp_game_weather", f_pp_game_weather * (1.0 - f_game_zombie_vision) + 0.2 * f_game_zombie_vision);
}

sub game_modify()
{
    extern float TIME;
	extern float f_game_oculus_enable;
	float oculus_enable = clamp(f_game_oculus_enable);
	float oculus_enable_inv = 1.0 - oculus_enable;

	extern float f_game_player_health;
	extern float f_game_player_state_injured;
    extern float f_game_player_heartbeat;

	float injured = clamp(f_game_player_state_injured);
	float injured = max(injured, clamp(f_game_player_health));
    //float injured = clamp(injured + f_game_player_heartbeat * 0.15);
	float injured_shake = clamp(f_game_player_heartbeat);
	float injured_desaturate = clamp(injured * 3.0 / 2.0) * 0.75;	// min: 0.0, max 0.666
	float injured_radial = clamp((injured - 1.0 / 3.0) * 3.0);	// min: 0.333, max 0.666

	extern float f_game_player_fatigue;
	extern float f_game_player_state_exhausted;
	float exhausted = clamp(f_game_player_state_exhausted);
	float exhausted = max(exhausted, clamp(f_game_player_fatigue));
	float exhausted_inv = 1.0 - exhausted;
	float exhausted_1by = 1.0 / max(exhausted, f_div_delta);

	extern float f_game_player_screamer;
	extern float f_movie_screamer;
	extern float f_game_player_pounced;
	extern float f_game_player_state_dazed;
	float dazed = clamp(f_game_player_state_dazed);
	float dazed = max(dazed, clamp(max(f_game_player_screamer, f_movie_screamer)));
	float dazed = max(dazed, clamp(f_game_player_pounced));
	float dazed_inv = 1.0 - dazed;

	extern float f_game_player_toxic;
	extern float f_map_player_toxic;
	extern float f_game_player_infection;
	extern float f_movie_infection;
	extern float f_game_player_state_poisoned;
	extern float f_movie_toxic;
	float poisoned = clamp(f_game_player_state_poisoned);
	float poisoned = max(poisoned, clamp(f_game_player_toxic * 0.5));
	float poisoned = max(poisoned, clamp(f_map_player_toxic));
	float poisoned = max(poisoned, clamp(max(f_game_player_infection, f_movie_infection)));
	float poisoned = max(poisoned, clamp(f_movie_toxic));
	float poisoned_inv = 1.0 - poisoned;
	float poisoned_1by = 1.0 / max(poisoned, f_div_delta);

    extern float f_game_player_guts;
	extern float f_game_player_state_disguised;
	float disguised = clamp(f_game_player_state_disguised);
	float disguised = max(disguised, clamp(f_game_player_guts));
	// float disguised_inv = 1.0 - disguised;

    extern float f_game_player_knockdown;
    extern float f_game_player_knockdown_lowhealth;
    float knockdown = clamp(max(f_game_player_knockdown, f_game_player_knockdown_lowhealth));


	extern float f_game_player_cth;
	float cth = clamp(f_game_player_cth);

	extern float f_game_player_duv;
	float duv = clamp(f_game_player_duv);

	extern float f_game_player_buv;
	float buv = clamp(f_game_player_buv);

	extern float f_game_player_gre;
	float gre = clamp(f_game_player_gre);
	
	extern float f_game_player_cureaura;
	float cureaura = clamp(f_game_player_cureaura);
	float cureaura_inv = 1 - cureaura;
	
	extern float f_game_player_cureaura_strong;
	float cureaura_strong = clamp(f_game_player_cureaura_strong);
	float cureaura_strong_inv = 1 - cureaura_strong;
	float cur_var = clamp(sin(0.6 * TIME) * 3.0 - 2.0) * clamp(sin(0.6 * TIME) * 3.0 - 2.0);

	extern float f_game_player_hunter_drained;
	float hunter_drained = clamp(f_game_player_hunter_drained);

    extern float f_game_player_explosion;
	extern float f_game_player_state_collided;
	float collided = clamp(f_game_player_state_collided);
	float collided = max(collided, clamp(f_game_player_explosion) * 0.5);
	float collided_inv = 1.0 - collided;

	extern float f_game_player_fury_dof;
	float fury_dof = clamp(f_game_player_fury_dof);
	float fury_dof_inv = 1.0 - fury_dof;
	extern float f_game_player_state_melee;
	float melee = clamp(f_game_player_state_melee);
	float melee = max(melee, fury_dof);
	float melee_1by = 1.0 / max(melee, f_div_delta);

	extern float f_game_player_fury_dof_far;
	extern float f_game_player_state_melee_distance;
	float melee_distance = f_game_player_state_melee_distance * fury_dof_inv + f_game_player_fury_dof_far * fury_dof;

	extern float f_game_player_night_level_gain;
	float night_level_gain = clamp(f_game_player_night_level_gain);
	float night_level_gain_inv = 1.0 - night_level_gain;

	extern float f_tahir_fight_on;
	float tahir_fight = clamp(f_tahir_fight_on);
	float tahir_fight_inv = 1.0 - tahir_fight;
	float tahir_fight_1by = 1.0 / max(tahir_fight, f_div_delta);

	extern float f_game_zombie_vision;
	extern float f_game_player_night_vision;
	float zombie_vision = clamp(f_game_zombie_vision);
	float zombie_vision = max(zombie_vision, clamp(f_game_player_night_vision));
	Set("f_pp_game_zombie_vision", zombie_vision);
	float zombie_vision_inv = 1.0 - zombie_vision;
	float zombie_vision_1by = 1.0 / max(zombie_vision, f_div_delta);

	extern float f_game_zombie_vision_ring_x;
	extern float f_game_zombie_vision_ring_y;
	extern float f_game_zombie_vision_ring_scale;
	float zombie_vision_ring_scale_inv = 1.0 - f_game_zombie_vision_ring_scale;

	extern float f_game_noire;
	float noire = pow(clamp(f_game_noire), 2.2);
	float noire_inv = 1.0 - noire;

	extern float f_game_noire_red;
	float noire_red = clamp(f_game_noire_red);
	float noire_red_inv = 1.0 - noire_red;

	extern float f_game_dream;
	float dream = pow(clamp(f_game_dream), 2.2);
	float dream_inv = 1.0 - dream;
    float dream_1by = 1.0 / max(dream, f_div_delta);

	extern float f_game_zombie_killed;
	float zombie_killed = clamp(f_game_zombie_killed);
	float zombie_killed_inv = 1.0 - zombie_killed;

	extern float f_game_zombie_killed_gamma;

    extern float f_game_dialog;
    float dialog = clamp(f_game_dialog);
	float dialog_1by = 1.0 / max(dialog, f_div_delta);

	extern float f_menu_blur;
	float menu_blur = clamp(f_menu_blur);

	extern float f_game_dialog_distance;
	float dialog_distance = f_game_dialog_distance;

	extern float f_game_dialog_distance_far;
	float dialog_distance_far = f_game_dialog_distance_far;

	extern float f_game_player_dof_far;
	float player_dof_far = clamp(f_game_player_dof_far);
	float player_dof_far_1by = 1.0 / max(player_dof_far, f_div_delta);

	extern float f_game_player_dof_far_min;
	float player_dof_far_min = f_game_player_dof_far_min;

	extern float f_game_player_dof_far_max;
	float player_dof_far_max = f_game_player_dof_far_max;

    extern float f_game_player_damage;
	extern float f_movie_damage;
    float damage = max(clamp(f_game_player_damage), clamp(f_movie_damage));

	extern float f_game_player_damage_motion_blur;
	float damage_motion_blur = clamp(f_game_player_damage_motion_blur);

	extern float f_game_player_damage_prv_copy;
	float damage_prv_copy = clamp(f_game_player_damage_prv_copy);

	extern float f_game_player_sprint;
    float sprint = clamp(f_game_player_sprint);
	float sprint = sprint * oculus_enable_inv;

	extern float f_game_player_flashbang_prv_copy;
	float flashbang_prv_copy = clamp(f_game_player_flashbang_prv_copy);
	float flashbang_prv_copy_inv = 1.0 - flashbang_prv_copy;

	extern float f_pp_game_player_flashbang_time;
	float flashbang_time = pow(f_pp_game_player_flashbang_time / 4.0, 8.0); // / 4.0 = mid point (time) of whole effect (logic_script_game.scr = 6)

	extern float f_game_player_flash;
	float flash = clamp(f_game_player_flash);
	float flash_inv = 1.0 - flash;
	

	
    extern float f_game_postprocess_effect_5;
    extern float f_game_postprocess_effect_7;
	
    extern float f_lockpicking_minigame;
    extern float f_ui_ingame_blur;
    extern float f_menu_desaturate;

    // aberration - zombie bite
    extern float f_pp_aberration_scale;
    extern float f_pp_aberration_speed;
    extern float f_pp_aberration_strength;

	float aberration_scale = f_pp_aberration_scale;
    float aberration_speed = f_pp_aberration_speed;
    float aberration_strength = f_pp_aberration_strength;

	float aberration_scale = max(aberration_scale, 0.05 * dazed);
    float aberration_speed = max(aberration_speed, 20.0 * clamp(dazed * 100000.0));
    float aberration_strength = max(aberration_strength, 0.75 * dazed);

	float aberration_scale = max(aberration_scale, 0.01 * tahir_fight);
    float aberration_speed = max(aberration_speed, 0.75 * clamp(tahir_fight * 100000.0));
    float aberration_strength = max(aberration_strength, 1.0 * tahir_fight);

    Set("f_pp_aberration_scale", aberration_scale);
    Set("f_pp_aberration_speed", aberration_speed);
    Set("f_pp_aberration_strength", aberration_strength);

    // shake - zombie bite
    extern float f_pp_shake_scale;
    extern float f_pp_shake_speed;
    extern float f_pp_shake_strength;

    float f_pp_shake_scale = max(f_pp_shake_scale, 0.05 * collided);
	float f_pp_shake_strength = max(f_pp_shake_strength, 0.5 * collided);
	float f_pp_shake_speed = max(f_pp_shake_speed, collided * collided * 4.0);

    float f_pp_shake_scale = max(f_pp_shake_scale, 0.035 * injured_shake);
	float f_pp_shake_strength = max(f_pp_shake_strength, 1.0 * injured_shake);
	float f_pp_shake_speed = max(f_pp_shake_speed, 20.0 * injured_shake);

    float f_pp_shake_scale = max(f_pp_shake_scale, 0.05 * cureaura);
	float f_pp_shake_strength = max(f_pp_shake_strength, 0.5 * cureaura);
	float f_pp_shake_speed = max(f_pp_shake_speed, 15.0 * cureaura);
	
	float f_pp_shake_scale = max(f_pp_shake_scale, 0.25 * cureaura_strong);
	float f_pp_shake_strength = max(f_pp_shake_strength, 1.0 * cureaura_strong);
	float f_pp_shake_speed = max(f_pp_shake_speed, 15.0 * cureaura_strong);

	Set("f_pp_shake_scale", f_pp_shake_scale);
    Set("f_pp_shake_speed", f_pp_shake_speed);
    Set("f_pp_shake_strength", f_pp_shake_strength);

    //blur
    extern float f_pp_blur;
	float f_pp_blur = max(f_pp_blur, f_lockpicking_minigame);
	float f_pp_blur = max(f_pp_blur, collided);
	float f_pp_blur = max(f_pp_blur, dazed);
	float f_pp_blur = max(f_pp_blur, noire * 0.175);
	float f_pp_blur = max(f_pp_blur, f_ui_ingame_blur * 0.9);
    float f_pp_blur = max(f_pp_blur, knockdown);
	float f_pp_blur = max(f_pp_blur, damage * 0.2);
	float f_pp_blur = max(f_pp_blur, menu_blur);
	float f_pp_blur = max(f_pp_blur, cureaura_strong  * cur_var * 0.02);
    Set("f_pp_blur", f_pp_blur);

    //DOF
    extern float f_pp_blur_near;
    extern float f_pp_blur_near_min;
    extern float f_pp_blur_near_max;
    extern float f_pp_blur_far_min;
    extern float f_pp_blur_far_max;
    extern float f_pp_blur_far;

	//fight (melee, grab)
    float f_pp_blur_far_min = min(f_pp_blur_far_min, melee_1by * melee_distance * 0.75);
    float f_pp_blur_far_max = min(f_pp_blur_far_max, melee_1by * melee_distance);
    float f_pp_blur_far = max(f_pp_blur_far, melee);

    //DOF - dialog
    float f_pp_blur_far_min = min(f_pp_blur_far_min, dialog_1by * f_game_dialog_distance);
    float f_pp_blur_far_max = min(f_pp_blur_far_max, dialog_1by * f_game_dialog_distance_far);
    float f_pp_blur_far = max(f_pp_blur_far, dialog);

    float f_pp_blur_far_min = min(f_pp_blur_far_min, player_dof_far_1by * player_dof_far_min);
    float f_pp_blur_far_max = min(f_pp_blur_far_max, player_dof_far_1by * player_dof_far_max);
    float f_pp_blur_far = max(f_pp_blur_far, player_dof_far);
	
    float f_pp_blur_far_min = min(f_pp_blur_far_min, poisoned_1by * 5.0);
    float f_pp_blur_far_max = min(f_pp_blur_far_max, poisoned_1by * 20.0);
    float f_pp_blur_far = max(f_pp_blur_far, poisoned);

    float f_pp_blur_far_min = min(f_pp_blur_far_min, dream_1by * 15.0);
    float f_pp_blur_far_max = min(f_pp_blur_far_max, dream_1by * 175.0);
    float f_pp_blur_far = max(f_pp_blur_far, dream);

    float f_pp_blur_far_min = min(f_pp_blur_far_min, tahir_fight_1by * 2.0);
    float f_pp_blur_far_max = min(f_pp_blur_far_max, tahir_fight_1by * 12.0);
    float f_pp_blur_far = max(f_pp_blur_far, tahir_fight);

    //DOF - set variables and disable in oculus rift mode
    Set("f_pp_blur_near", f_pp_blur_near * oculus_enable_inv);
    Set("f_pp_blur_near_min", f_pp_blur_near_min * oculus_enable_inv);
    Set("f_pp_blur_near_max", f_pp_blur_near_max * oculus_enable_inv);
    Set("f_pp_blur_far_min", f_pp_blur_far_min * oculus_enable_inv);
    Set("f_pp_blur_far_max", f_pp_blur_far_max * oculus_enable_inv);
    Set("f_pp_blur_far", f_pp_blur_far * oculus_enable_inv);

	//motion blur copy
	extern float f_pp_prv_copy;
	float prv_copy = f_pp_prv_copy;
	float prv_copy = max(prv_copy, flashbang_prv_copy);
	float prv_copy = max(prv_copy, damage_prv_copy);
	float prv_copy = max(prv_copy, poisoned);
	float prv_copy = max(prv_copy, dream);
	float prv_copy = max(prv_copy, cureaura);
	float prv_copy = max(prv_copy, cureaura_strong);
	float prv_copy = max(prv_copy, tahir_fight);
	Set("f_pp_prv_copy", prv_copy);

	extern float f_pp_prv_add;
	float prv_add = f_pp_prv_add;
	float prv_add = max(prv_add, flashbang_time * flashbang_prv_copy_inv);
	float prv_add = max(prv_add, damage_motion_blur * 0.1);
	float prv_add = max(prv_add, poisoned * 0.2);
	float prv_add = max(prv_add, cureaura * 0.15);
	float prv_add = max(prv_add, cureaura_strong * 0.5 * cur_var);
	float prv_add = max(prv_add, dream * 0.15);
	Set("f_pp_prv_add", prv_add);

    //motion blur
    extern float f_prv_lrp;
	float f_prv_lrp = max(f_prv_lrp, tahir_fight * 0.3);
    Set("f_pp_prv_lrp", f_prv_lrp);

	extern float f_pp_overlay_effect_3; //lockpick
	float overlay_effect_3 = f_pp_overlay_effect_3;
	float overlay_effect_3 = max(overlay_effect_3, f_lockpicking_minigame);
	Set("f_pp_overlay_effect_3", overlay_effect_3);

	extern float f_pp_overlay_effect_5; //exhausted
	float overlay_effect_5 = f_pp_overlay_effect_5;
	float overlay_effect_5 = max(overlay_effect_5, pow(exhausted, 0.25));
	Set("f_pp_overlay_effect_5", overlay_effect_5);

	float noire_desaturate = noire * 0.85;
	extern float f_pp_saturation;
	float saturation = f_pp_saturation;
	float saturation = min(saturation, 1.0 - noire_desaturate * noire_red_inv);
	Set("f_pp_saturation", saturation);

    //desaturation
    extern float f_pp_desaturate;

	float f_pp_desaturate = max(f_pp_desaturate, injured_desaturate);
	float f_pp_desaturate = max(f_pp_desaturate, collided * 0.5);
	float f_pp_desaturate = max(f_pp_desaturate, tahir_fight);
	float f_pp_desaturate = max(f_pp_desaturate, f_menu_desaturate);
	float f_pp_desaturate = max(f_pp_desaturate, noire_desaturate * noire_red);
	float f_pp_desaturate = max(f_pp_desaturate, f_lockpicking_minigame);
	float f_pp_desaturate = max(f_pp_desaturate, damage * 0.5);
	float f_pp_desaturate = max(f_pp_desaturate, cth * 0.5);
	float f_pp_desaturate = max(f_pp_desaturate, duv * 0.5);
	float f_pp_desaturate = max(f_pp_desaturate, gre * 0.5);


    Set("f_pp_desaturate", f_pp_desaturate);

	extern vec3 v_pp_desaturate_factor_mask;
	extern vec3 v_pp_desaturate_tint;
	extern vec3 v_pp_desaturate_tint_masked;

	vec3 v_pp_desaturate_factor_mask = v_pp_desaturate_factor_mask * tahir_fight_inv + [2.0, -1.0, -1.0] * tahir_fight;
	vec3 v_pp_desaturate_tint = v_pp_desaturate_tint * tahir_fight_inv + [0.7, 1.0, 0.25] * tahir_fight;
	vec3 v_pp_desaturate_tint_masked = v_pp_desaturate_tint_masked * tahir_fight_inv + [5.0, 0.7, 0.5] * tahir_fight;

	vec3 v_pp_desaturate_factor_mask = v_pp_desaturate_factor_mask * noire_inv + [10.0, -10.0, -10.0] * noire;
	vec3 v_pp_desaturate_tint = v_pp_desaturate_tint * noire_inv + [1.0, 1.0, 1.0] * noire;
	vec3 v_pp_desaturate_tint_masked = v_pp_desaturate_tint_masked * noire_inv + [1.0, 1.0, 1.0] * noire;

    Set("v_pp_desaturate_factor_mask", v_pp_desaturate_factor_mask);
    Set("v_pp_desaturate_tint", v_pp_desaturate_tint);
    Set("v_pp_desaturate_tint_masked", v_pp_desaturate_tint_masked);

    //Blur radial mask
    extern float f_pp_blur_mask_radial_bias;
    extern float f_pp_blur_mask_radial_scale;
    extern float f_pp_blur_mask_radial_opacity;
    extern float f_pp_blur_mask_radial_scale_y;
    extern float f_pp_blur_mask_radial_scale_x;
	
    float f_pp_blur_mask_radial_bias = min(f_pp_blur_mask_radial_bias, -sprint * 1.0);
    float f_pp_blur_mask_radial_scale = max(f_pp_blur_mask_radial_scale, sprint * 2.0);
    float f_pp_blur_mask_radial_opacity = max(f_pp_blur_mask_radial_opacity, sprint);

	float f_pp_blur_mask_radial_bias = max(f_pp_blur_mask_radial_bias, injured_radial * 0.0);
	float f_pp_blur_mask_radial_scale = max(f_pp_blur_mask_radial_scale, injured_radial * 1.0);
	float f_pp_blur_mask_radial_opacity = max(f_pp_blur_mask_radial_opacity, injured_radial * 1.0);

	float f_pp_blur_mask_radial_bias = max(f_pp_blur_mask_radial_bias, exhausted * 0.0);
	float f_pp_blur_mask_radial_scale = max(f_pp_blur_mask_radial_scale, exhausted * 1.0);
	float f_pp_blur_mask_radial_opacity = max(f_pp_blur_mask_radial_opacity, exhausted * 1.0);

	float f_pp_blur_mask_radial_bias = max(f_pp_blur_mask_radial_bias, tahir_fight * 0.0);
	float f_pp_blur_mask_radial_scale = max(f_pp_blur_mask_radial_scale, tahir_fight * 1.0);
    float f_pp_blur_mask_radial_opacity = max(f_pp_blur_mask_radial_opacity, tahir_fight * 0.25);

	float f_pp_blur_mask_radial_bias = max(f_pp_blur_mask_radial_bias, f_game_postprocess_effect_5 * 0.1);
	float f_pp_blur_mask_radial_scale = max(f_pp_blur_mask_radial_scale, f_game_postprocess_effect_5 * 1.0);
    float f_pp_blur_mask_radial_opacity = max(f_pp_blur_mask_radial_opacity, f_game_postprocess_effect_5);
    float f_pp_blur_mask_radial_scale_x = min(f_pp_blur_mask_radial_scale_x,1- f_game_postprocess_effect_5);
    float f_pp_blur_mask_radial_scale_y = max(f_pp_blur_mask_radial_scale_y, f_game_postprocess_effect_5);
	
	float f_pp_blur_mask_radial_bias = max(f_pp_blur_mask_radial_bias, f_game_postprocess_effect_7 * 0.2);
	float f_pp_blur_mask_radial_scale = max(f_pp_blur_mask_radial_scale, f_game_postprocess_effect_7 * 0.2);
    float f_pp_blur_mask_radial_opacity = max(f_pp_blur_mask_radial_opacity, f_game_postprocess_effect_7* 0.5);
    float f_pp_blur_mask_radial_scale_x = max(f_pp_blur_mask_radial_scale_x,f_game_postprocess_effect_7);
    float f_pp_blur_mask_radial_scale_y = max(f_pp_blur_mask_radial_scale_y, f_game_postprocess_effect_7);
	
    Set("f_pp_blur_mask_radial_bias", f_pp_blur_mask_radial_bias);
    Set("f_pp_blur_mask_radial_scale", f_pp_blur_mask_radial_scale);
    Set("f_pp_blur_mask_radial_opacity", f_pp_blur_mask_radial_opacity);
    Set("f_pp_blur_mask_radial_scale_x", f_pp_blur_mask_radial_scale_x);
    Set("f_pp_blur_mask_radial_scale_y", f_pp_blur_mask_radial_scale_y);

    //Radial blur
    extern float f_pp_blur_radial_mask_scale;
    extern float f_pp_blur_radial_mask_opacity;
    extern float f_pp_blur_radial_power;
    extern float f_pp_blur_radial_range;
    extern float f_pp_blur_radial_center_x;
    extern float f_pp_blur_radial_center_y;

	float f_pp_blur_radial_mask_scale = max(f_pp_blur_radial_mask_scale, sprint);
    float f_pp_blur_radial_power = max(f_pp_blur_radial_power, sprint);
    float f_pp_blur_radial_range = max(f_pp_blur_radial_range, sprint * 0.2);

	float f_pp_blur_radial_mask_scale = f_pp_blur_radial_mask_scale * zombie_vision_inv + 0.4 * zombie_vision;
	float f_pp_blur_radial_mask_opacity = max(f_pp_blur_radial_mask_opacity, zombie_vision);
	float f_pp_blur_radial_power = max(f_pp_blur_radial_power, zombie_vision * (1.0 + zombie_vision_ring_scale_inv * 4.0));
	float f_pp_blur_radial_range = max(f_pp_blur_radial_range, zombie_vision * (0.1 + zombie_vision_ring_scale_inv * 0.1));
	float f_pp_blur_radial_center_x = f_pp_blur_radial_center_x + f_game_zombie_vision_ring_x * zombie_vision * 0.5;
	float f_pp_blur_radial_center_y = f_pp_blur_radial_center_y - f_game_zombie_vision_ring_y * zombie_vision * 0.5;

	float f_pp_blur_radial_mask_scale = max(f_pp_blur_radial_mask_scale, dream * 1.0);
	float f_pp_blur_radial_mask_opacity = max(f_pp_blur_radial_mask_opacity, dream * 0.65);
	float f_pp_blur_radial_power = max(f_pp_blur_radial_power, dream * 1.0);
	float f_pp_blur_radial_range = max(f_pp_blur_radial_range, dream * 0.3);
	float f_pp_blur_radial_center_x = f_pp_blur_radial_center_x + sin(TIME * 0.73) * dream * 0.1;
	float f_pp_blur_radial_center_y = f_pp_blur_radial_center_y + sin(TIME * 1.37) * dream * 0.1;

	float f_pp_blur_radial_mask_scale = max(f_pp_blur_radial_mask_scale, poisoned * 2.0);
	float f_pp_blur_radial_mask_opacity = max(f_pp_blur_radial_mask_opacity, poisoned * clamp(sin(TIME * 3.23) * 0.5 + 0.5));
	float f_pp_blur_radial_power = max(f_pp_blur_radial_power, poisoned * 0.75);
	float f_pp_blur_radial_range = max(f_pp_blur_radial_range, poisoned * 0.3);
	float f_pp_blur_radial_center_x = f_pp_blur_radial_center_x + sin(TIME * 0.73) * poisoned * 0.4;
	float f_pp_blur_radial_center_y = f_pp_blur_radial_center_y + sin(TIME * 1.37) * poisoned * 0.4;
	
	
	float f_pp_blur_radial_mask_scale = max(f_pp_blur_radial_mask_scale, cureaura * 0.01);
	float f_pp_blur_radial_mask_opacity = max(f_pp_blur_radial_mask_opacity, cureaura * cur_var);
	float f_pp_blur_radial_power = max(f_pp_blur_radial_power, cureaura * 0.6);
	float f_pp_blur_radial_range = max(f_pp_blur_radial_range, cureaura * 0.2);
	float f_pp_blur_radial_center_x = f_pp_blur_radial_center_x + sin(TIME * 2.73) * cureaura * 0.2;
	float f_pp_blur_radial_center_y = f_pp_blur_radial_center_y + sin(TIME * 1.37) * cureaura * 0.2;
	
	float f_pp_blur_radial_mask_scale = max(f_pp_blur_radial_mask_scale, cureaura_strong * 0.01);
	float f_pp_blur_radial_mask_opacity = max(f_pp_blur_radial_mask_opacity, cureaura_strong * cur_var * 0.3);
	float f_pp_blur_radial_power = max(f_pp_blur_radial_power, cureaura_strong );
	float f_pp_blur_radial_range = max(f_pp_blur_radial_range, cureaura_strong * 0.5);
	float f_pp_blur_radial_center_x = f_pp_blur_radial_center_x + sin(TIME * 2.73) * cureaura_strong * 0.1;
	float f_pp_blur_radial_center_y = f_pp_blur_radial_center_y + sin(TIME * 1.37) * cureaura_strong * 0.1;

	Set("f_pp_blur_radial_mask_scale", f_pp_blur_radial_mask_scale);
	Set("f_pp_blur_radial_mask_opacity", f_pp_blur_radial_mask_opacity);
    Set("f_pp_blur_radial_power", f_pp_blur_radial_power);
    Set("f_pp_blur_radial_range", f_pp_blur_radial_range);
    Set("f_pp_blur_radial_center_x", f_pp_blur_radial_center_x);
    Set("f_pp_blur_radial_center_y", f_pp_blur_radial_center_y);

    //Luminance PreMultiply
    extern float f_pp_lum_pm;
    extern vec3 v_pp_lum_pm_factors;
    extern float f_pp_lum_pm_weights_factor;

	float f_pp_lum_pm = max(f_pp_lum_pm, tahir_fight * 0.8);
    vec3 v_pp_lum_pm_factors = [1.0, 1.0, 1.0] * tahir_fight + v_pp_lum_pm_factors * tahir_fight_inv;
    float f_pp_lum_pm_weights_factor = 10.0 * tahir_fight + f_pp_lum_pm_weights_factor * tahir_fight_inv;

	float f_pp_lum_pm = max(f_pp_lum_pm, flash * 0.8);
    vec3 v_pp_lum_pm_factors = [1.0, 1.0, 1.0] * flash + v_pp_lum_pm_factors * flash_inv;
    float f_pp_lum_pm_weights_factor = 10.0 * flash + f_pp_lum_pm_weights_factor * flash_inv;
	
	float f_pp_lum_pm = max(f_pp_lum_pm, cureaura *  clamp( (sin(TIME * 1.33) + sin(TIME * 2.43) + sin(TIME * 3.23))  * 0.5* 0.333 + 0.5  ));
	vec3 v_pp_lum_pm_factors = [1.0, 1.0, 1.0] * cureaura + v_pp_lum_pm_factors * cureaura_inv;
    float f_pp_lum_pm_weights_factor = 10.0 * cureaura + f_pp_lum_pm_weights_factor * cureaura_inv;
	
	float f_pp_lum_pm = max(f_pp_lum_pm, cureaura_strong *  cur_var);
	vec3 v_pp_lum_pm_factors = [1.0, 1.0, 1.0] * cureaura_strong + v_pp_lum_pm_factors * cureaura_strong_inv;
    float f_pp_lum_pm_weights_factor = 10.0 * cureaura_strong + f_pp_lum_pm_weights_factor * cureaura_strong_inv;
	

    Set("f_pp_lum_pm", f_pp_lum_pm);
    Set("v_pp_lum_pm_factors", v_pp_lum_pm_factors);
    Set("f_pp_lum_pm_weights_factor", f_pp_lum_pm_weights_factor);

	extern vec4 v_game_player_blood;
	Set("f_pp_game_player_blood", max(max(max(v_game_player_blood.x, v_game_player_blood.y), v_game_player_blood.z), v_game_player_blood.w));

	extern vec4 v_game_player_blood_hit;
	Set("f_pp_game_player_blood_hit", max(max(max(v_game_player_blood_hit.x, v_game_player_blood_hit.y), v_game_player_blood_hit.z), v_game_player_blood_hit.w));

	extern vec3 v_pp_levels_rgb_in_black;
	extern vec3 v_pp_levels_rgb_in_gamma;
	extern vec3 v_pp_levels_rgb_in_white;
	extern vec3 v_pp_levels_rgb_out_black;
	extern vec3 v_pp_levels_rgb_out_white;
	extern float f_pp_levels;

	vec3 levels_in_black = v_pp_levels_rgb_in_black;
	vec3 levels_in_gamma = v_pp_levels_rgb_in_gamma;
	vec3 levels_in_white = v_pp_levels_rgb_in_white;
	vec3 levels_out_black = v_pp_levels_rgb_out_black;
	vec3 levels_out_white = v_pp_levels_rgb_out_white;
	float levels = f_pp_levels;

	vec3 levels_in_gamma = levels_in_gamma * night_level_gain_inv + 1.15 * night_level_gain;
	float levels = levels * night_level_gain_inv + night_level_gain; // * 1.0

	vec3 levels_in_gamma = levels_in_gamma * zombie_killed_inv + f_game_zombie_killed_gamma * zombie_killed;
	float levels = levels * zombie_killed_inv + zombie_killed; // * 1.0

	Set("v_pp_levels_rgb_in_black", levels_in_black);
	Set("v_pp_levels_rgb_in_gamma", levels_in_gamma);
	Set("v_pp_levels_rgb_in_white", levels_in_white);
	Set("v_pp_levels_rgb_out_black", levels_out_black);
	Set("v_pp_levels_rgb_out_white", levels_out_white);
	Set("f_pp_levels", levels);

	extern vec3 v_pp_game_enemy_highlight_color;
	extern vec3 v_pp_game_enemy_highlight_factors;
	float zombie_vision_enemy_highlight_fade_far = 4.0;
	float zombie_vision_enemy_highlight_fade_near = 0.0;
	float zombie_vision_enemy_hightlight_mul = 1.0 / (zombie_vision_enemy_highlight_fade_far - zombie_vision_enemy_highlight_fade_near);
	float zombie_vision_enemy_hightlight_add = -zombie_vision_enemy_highlight_fade_near * zombie_vision_enemy_hightlight_mul;

	vec3 zombie_vision_enemy_highlight_color = [1.0, 1.0, 1.0];
	vec3 zombie_vision_enemy_highlight_factors = [zombie_vision_enemy_hightlight_mul, zombie_vision_enemy_hightlight_add, 2.0 * zombie_vision];
	Set("v_pp_game_enemy_highlight_color", v_pp_game_enemy_highlight_color * zombie_vision_inv + zombie_vision_enemy_highlight_color * zombie_vision);
	Set("v_pp_game_enemy_highlight_factors", v_pp_game_enemy_highlight_factors * zombie_vision_inv + zombie_vision_enemy_highlight_factors * zombie_vision);

	extern float f_pp_filmgrain_8;
	extern float f_pp_filmgrain_8_color;
	extern float f_pp_filmgrain_8_speed;

	float filmgrain_8 = f_pp_filmgrain_8;
	float filmgrain_8 = max(filmgrain_8, zombie_vision * 0.005);

	float filmgrain_8_color = f_pp_filmgrain_8_color;
	float filmgrain_8_color = max(filmgrain_8_color, zombie_vision);

	float filmgrain_8_speed = f_pp_filmgrain_8_speed;
	float filmgrain_8_speed = max(filmgrain_8_speed, zombie_vision * 1.5);

	Set("f_pp_filmgrain_8", filmgrain_8);
	Set("f_pp_filmgrain_8_color", filmgrain_8_color);
	Set("f_pp_filmgrain_8_speed", filmgrain_8_speed);

	//ZOMBIE VISION
	float exposure_white_zombie_vision = 0.1;
	float exposure_white_zombie_vision_inv_sqr = 1.0 / (exposure_white_zombie_vision * exposure_white_zombie_vision);
	float game_zombie_vision_weight = zombie_vision * zombie_vision;
	extern float f_pp_auto_exposure_white_inv_sqr;
	float auto_exposure_white_inv_sqr = exposure_white_zombie_vision_inv_sqr * game_zombie_vision_weight + f_pp_auto_exposure_white_inv_sqr * (1.0 - game_zombie_vision_weight);
	Set("f_pp_auto_exposure_white_inv_sqr", auto_exposure_white_inv_sqr);

	Set("f_pp_curves_effect_0_v", 129.0);
	Set("f_pp_curves_effect_0", zombie_vision);

	Set("f_pp_curves_effect_1_v", 132.0);
	Set("f_pp_curves_effect_1", disguised);

	Set("f_pp_curves_effect_2_v", 133.0);
	Set("f_pp_curves_effect_2", poisoned);

	Set("f_pp_curves_effect_3_v", 145.0);
	Set("f_pp_curves_effect_3", dream);

	Set("f_pp_curves_effect_4_v", 135.0); //obsolete
	Set("f_pp_curves_effect_4", duv);

	Set("f_pp_curves_effect_5_v", 142.0);
	Set("f_pp_curves_effect_5", buv);

	Set("f_pp_curves_effect_6_v", 141.0);
	Set("f_pp_curves_effect_6", gre);

	Set("f_pp_curves_effect_7_v", 131.0);
	Set("f_pp_curves_effect_7", damage);

	Set("f_pp_curves_effect_8_v", 143.0);
	Set("f_pp_curves_effect_8", hunter_drained);
}

sub game_set()
{
	extern float f_pp_game_player_blood;
	extern float f_pp_game_player_blood_hit;
	extern float f_pp_blur_on;
	float f_pp_blur_on = max(f_pp_blur_on, f_pp_game_player_blood);
	float f_pp_blur_on = max(f_pp_blur_on, f_pp_game_player_blood_hit);
	Set("f_pp_blur_on", f_pp_blur_on);
}

