import "daytime.def"
import "frame_script_def.scr"

sub weather()
{
	extern float TIME;
	extern float f_weather_interior;
	float interior = clamp(f_weather_interior);
	float interior_inv = 1.0 - interior;

// float time = TIME * 0.1;
// Set("f_game_time", (time - floor(time)) * 24.0); // time format hh.mmss h <00.0-23.0>, m <0.00-0.99>, s<0.0000-0.0099>

	//DAYTIME_NIGHT_END		- shading color = moon color,	shading dir = moon

	//DAYTIME_DAWN_START	- shading color = 0.0,			shading dir = step moon2sun
	//DAYTIME_DAWN			- shading color = sun color,	shading dir = sun

	//DAYTIME_DUSK			- shading color = sun color,	shading dir = sun
	//DAYTIME_DUSK_END 		- sun color = 0.0,				shading dir = step sun2moon

	//DAYTIME_NIGHT_START 	- shading color = moon color,	shading dir = moon

	extern float f_pp_game_weather;
	extern float f_weather_weight_fog;
	extern float f_weather_weight_clouds;
	extern float f_weather_weight_wet;
	extern float f_weather_weight_rain;
	extern float f_weather_weight_storm;
	extern float f_weather_weight_rainstorm;
	extern float f_weather_weight_cloudsrain;
	
	//weights
	float weight_fog = f_weather_weight_fog;
	float weight_fog_inv = 1.0 - f_weather_weight_fog;
	float weight_clouds = f_weather_weight_clouds;
	float weight_clouds_inv = 1.0 - f_weather_weight_clouds;
	float weight_wet = f_weather_weight_wet;
	float weight_wet_inv = 1.0 - f_weather_weight_wet;
	float weight_rain = f_weather_weight_rain;
	float weight_rain_inv = 1.0 - f_weather_weight_rain;
	float weight_storm = f_weather_weight_storm;
	float weight_storm_inv = 1.0 - f_weather_weight_storm;
	float weight_rainstorm = f_weather_weight_rainstorm;
	float weight_rainstorm_inv = 1.0 - f_weather_weight_rainstorm;
	float weight_cloudsrain = f_weather_weight_cloudsrain;
	float weight_cloudsrain_inv = 1.0 - f_weather_weight_cloudsrain;

	extern float f_game_time;
	float weight_night_end_2_dawn_start = clamp((f_game_time - DAYTIME_NIGHT_END) / (DAYTIME_DAWN_START - DAYTIME_NIGHT_END));
	float weight_dawn_start_2_dawn = clamp((f_game_time - DAYTIME_DAWN_START) / (DAYTIME_DAWN - DAYTIME_DAWN_START));
	float weight_dawn_2_dawn_end = clamp((f_game_time - DAYTIME_DAWN) / (DAYTIME_DAWN_END - DAYTIME_DAWN));
	float weight_dawn_end_2_day_start = clamp((f_game_time - DAYTIME_DAWN_END) / (DAYTIME_DAY_START - DAYTIME_DAWN_END));
	float weight_day_end_2_dusk_start = clamp((f_game_time - DAYTIME_DAY_END) / (DAYTIME_DUSK_START - DAYTIME_DAY_END));
	float weight_dusk_start_2_dusk = clamp((f_game_time - DAYTIME_DUSK_START) / (DAYTIME_DUSK - DAYTIME_DUSK_START));
	float weight_dusk_2_dusk_end = clamp((f_game_time - DAYTIME_DUSK) / (DAYTIME_DUSK_END - DAYTIME_DUSK));
	float weight_dusk_end_2_night_start = clamp((f_game_time - DAYTIME_DUSK_END) / (DAYTIME_NIGHT_START - DAYTIME_DUSK_END));

	float weight_night = 1.0 - weight_night_end_2_dawn_start + weight_dusk_end_2_night_start;

	float weight_dawn_start = weight_night_end_2_dawn_start - weight_dawn_start_2_dawn;
	float weight_dawn = weight_dawn_start_2_dawn - weight_dawn_2_dawn_end;
	float weight_dawn_end = weight_dawn_2_dawn_end - weight_dawn_end_2_day_start;

	float weight_day = weight_dawn_end_2_day_start - weight_day_end_2_dusk_start;

	float weight_dusk_start = weight_day_end_2_dusk_start - weight_dusk_start_2_dusk;
	float weight_dusk = weight_dusk_start_2_dusk - weight_dusk_2_dusk_end;
	float weight_dusk_end = weight_dusk_2_dusk_end - weight_dusk_end_2_night_start;

	bool day_on = (f_game_time > DAYTIME_DAWN_START) && (f_game_time < DAYTIME_DUSK_END);

	// sun direction
	extern float f_level_latitude;
	extern float f_level_north;

	//proper hours: 0(24) midnight, 6.00 dawn, 12.00 noon, 18.00 dusk
	float phase_day = clamp((f_game_time - DAYTIME_DAWN_START)/(DAYTIME_DUSK_END - DAYTIME_DAWN_START)) * 0.5 + 0.25; //remapping DAYTIME_DAWN_START-DAYTIME_DUSK_END to 6.00-18.00;
	float phase_night = clamp((f_game_time > ((DAYTIME_DAWN_START + DAYTIME_DUSK_END) * 0.5)) ? (f_game_time - DAYTIME_DUSK_END) / (24.0 + DAYTIME_DAWN_START - DAYTIME_DUSK_END) : (24.0 + f_game_time - DAYTIME_DUSK_END) / (24.0 + DAYTIME_DAWN_START - DAYTIME_DUSK_END)) * 0.5 + 0.75;
	float phase_night = phase_night - floor(phase_night);

	float sun_scattering_phase = day_on ? phase_day : phase_night;
	float sun_scattering_phase = sun_scattering_phase * 2.0 * f_PI;
	vec3 sun_scattering_dir = [sin(sun_scattering_phase), 0.0, -cos(sun_scattering_phase)];
	vec3 sun_scattering_dir = mulv(rotate(f_level_latitude - 90.0, 0.0, 0.0), sun_scattering_dir);
	vec3 sun_scattering_dir = mulv(rotate(0.0, 90.0 - f_level_north, 0.0), sun_scattering_dir);
	Set("v_pp_sun_scattering_dir", sun_scattering_dir);

	vec3 sun_face_dir = day_on ? sun_scattering_dir : [sun_scattering_dir.z, abs(sun_scattering_dir.y), -sun_scattering_dir.x]; //moon dir = rotated & absed sun dir
	Set("v_pp_sun_face_dir", sun_face_dir);
	
	vec3 shadow_dir = [sun_face_dir.x, max(sun_face_dir.y, 0.1), sun_face_dir.z];
	float shadow_dir_length_inv = 1.0 / pow(shadow_dir.x * shadow_dir.x + shadow_dir.y * shadow_dir.y + shadow_dir.z * shadow_dir.z, 0.5);
	vec3 shadow_dir = shadow_dir * shadow_dir_length_inv; //normalization

	// float quant_factor = 2500.0;
	// vec3 shadow_dir_quant = shadow_dir * quant_factor;
	// vec3 shadow_dir_quant_floor = [floor(shadow_dir_quant.x), floor(shadow_dir_quant.y), floor(shadow_dir_quant.z)];
	// vec3 shadow_dir_quant = (shadow_dir_quant - shadow_dir_quant_floor) / quant_factor;
	// vec3 shadow_dir = shadow_dir - shadow_dir_quant;

	extern vec3 v_pp_wind_dir;
	vec3 rain_dir = [-v_pp_wind_dir.x, f_PI, -v_pp_wind_dir.z];
	float rain_dir_length = pow(rain_dir.x * rain_dir.x + rain_dir.y * rain_dir.y + rain_dir.z * rain_dir.z, 0.5);
	vec3 rain_dir_n = rain_dir / rain_dir_length;
	vec3 shadow_dir = (weight_wet > 0.0) ? rain_dir_n : shadow_dir;
	Set("vsundir", shadow_dir);

	extern float f_shadow_map_size;
	float rain_shadows_radius = f_shadow_map_size / 16.0;
	extern int i_pp_engine_shadows_count;
	int shadows_count = (weight_wet > 0.0) ? 1 : i_pp_engine_shadows_count;
	Set("i_pp_engine_shadows_count", shadows_count);

	extern float f_engine_shadows_slice_size;
	float shadows_slice_size = (weight_wet > 0.0) ? rain_shadows_radius : f_engine_shadows_slice_size;
	Set("f_pp_engine_shadows_slice_size", shadows_slice_size);

	extern int i_shadows_count;
	int shadows_count = (weight_wet > 0.0) ? 1 : i_shadows_count;
	Set("i_pp_engine_shadows_count", shadows_count);

	// scattering_dir - pelny obieg slonca
		// 1. dwie interpolacje - w dzien i w nocy, zlozone na warunku

	// v_pp_sun_face_dir = face dir + shading dir
		// w dzien pochodna scattering_dir
		// w nocy kierunek ksiezyca

	// moon_dir
	// vsundir = shadows_dir
		// 1. pochodna v_pp_sun_face_dir ale:
		// 2. zablokowany nad horyzontem
		// 3. zkwantyfikowany
		// 4. jezeli deszcz -> rain_dir - kierunek wiatru



	float dawns = max(max(weight_dawn_start, weight_dawn), weight_dawn_end);
	float dusks = max(max(weight_dusk_start, weight_dusk), weight_dusk_end);

	// MIXING /////////////////////////////////////////////////////////////////////////////////////////
	//float lighting_mask = clamp(max(max(max(sin(TIME * 11.3), sin(TIME * 9.14)), sin(TIME * 7.14)), sin(TIME * 5.14)));
	//float lighting_mask = clamp((sin(TIME * 111.3) * 0.5 + 0.5) * (sin(TIME * 90.14) * 0.5 + 0.5) * (sin(TIME * 70.14) * 0.5 + 0.5) *(sin(TIME * 50.14) * 0.5 + 0.5));
	float lighting_mask = clamp(sin(TIME * 111.3) * sin(TIME * 90.14) * sin(TIME * 70.14) * sin(TIME * 50.14));
	float lighting_mask = lighting_mask * clamp(clamp(sin(TIME * 3.14)) * clamp(sin(TIME * 1.19)) * 2.0 - 1.0);
	float lighting_mask = lighting_mask * weight_storm * weight_storm;
	float lighting = lighting_mask * 4.0;
	Set("f_pp_lightning_on", lighting);

	vec3 shading_sun_color_night = [0.075, 0.075, 0.075] * weight_night;
	vec3 shading_sun_color_dawn_start = [0.0, 0.0, 0.0] * weight_dawn_start;
	vec3 shading_sun_color_dawn = [0.38, 0.33, 0.25] * weight_dawn;
	vec3 shading_sun_color_dawn_end = [0.996078, 0.87, 0.72] * weight_dawn_end;
	vec3 shading_sun_color_day = [0.996078, 0.968628, 0.921569] * weight_day;
	vec3 shading_sun_color_dusk_start = [0.996078, 0.87, 0.72] * weight_dusk_start;
	vec3 shading_sun_color_dusk = [0.6, 0.42, 0.27] * weight_dusk;
	vec3 shading_sun_color_dusk_end = [0.0, 0.0, 0.0] * weight_dusk_end;
	vec3 shading_sun_color = shading_sun_color_night + shading_sun_color_dawn_start + shading_sun_color_dawn + shading_sun_color_dawn_end + shading_sun_color_day + shading_sun_color_dusk_start + shading_sun_color_dusk + shading_sun_color_dusk_end;
	float shading_sun_lum = shading_sun_color.x * v_lum_factors.x + shading_sun_color.y * v_lum_factors.y + shading_sun_color.z * v_lum_factors.z;
    extern float f_level_lighting_reference;
	vec3 shading_sun_color = shading_sun_color * (1.0 - f_level_lighting_reference) + shading_sun_lum * f_level_lighting_reference;

	vec3 shading_sun_color_clouds_fade_only = shading_sun_color * weight_clouds_inv;	
	Set("v_pp_shading_sun_color_clouds_fade_only", shading_sun_color_clouds_fade_only);
	
	vec3 shading_sun_color_clouds_fade = shading_sun_color_clouds_fade_only + lighting;
	Set("v_pp_shading_sun_color_clouds_fade", shading_sun_color_clouds_fade);

	Set("v_pp_shading_sun_color_clouds_off", shading_sun_color + lighting);
	
	vec3 shading_sun_color = (weight_clouds < 1.0) ? shading_sun_color : [0.0, 0.0, 0.0];
	Set("v_pp_shading_sun_color_only", shading_sun_color);
	
	vec3 shading_sun_color = shading_sun_color + lighting;
	Set("v_shading_sun_color", shading_sun_color);

	
	
	extern float f_clouds_dynamic_on;
	float clouds_cover = (lighting_mask > 0.0) ? 0.0 : weight_clouds;
	Set("f_pp_clouds_dynamic_on", clouds_cover * f_clouds_dynamic_on);
	Set("f_pp_clouds_dynamic_cover", clouds_cover * clouds_cover * 3.0 - 1.0);

	vec3 clouds_color_night = [0.93, 0.93, 1.0] * 0.0 * weight_night;
	vec3 clouds_color_dawn_start = [0.99, 0.83, 0.68] * 0.12 * weight_dawn_start;
	vec3 clouds_color_dawn = [0.6, 0.52, 0.47] * 0.5 * weight_dawn;
	vec3 clouds_color_dawn_end = [0.996078, 0.97, 0.87] * weight_dawn_end;
	vec3 clouds_color_day = [1.0, 1.0, 1.0] * weight_day;
	vec3 clouds_color_dusk_start = [0.996078, 0.87, 0.72] * 0.7 * weight_dusk_start;
	vec3 clouds_color_dusk = [0.67, 0.42, 0.27] * 0.75 * weight_dusk;
	vec3 clouds_color_dusk_end = [0.61, 0.74, 0.8] * 0.025 * weight_dusk_end;
    vec3 clouds_color = clouds_color_night + clouds_color_dawn_start + clouds_color_dawn + clouds_color_dawn_end + clouds_color_day + clouds_color_dusk_start + clouds_color_dusk + clouds_color_dusk_end;
	float clouds_color_lum = clouds_color.x * v_lum_factors.x + clouds_color.y * v_lum_factors.y + clouds_color.z * v_lum_factors.z;
	float clouds_color_cover_weigth = pow(clouds_cover, 0.5);
	vec3 clouds_color = clouds_color * (1.0 - clouds_color_cover_weigth) + pow(clouds_color_lum, 1.5) * clouds_color_cover_weigth * 0.75;
	Set("v_clouds_clr", clouds_color);

	Set("f_stars_threshold", 0.7 * weight_night);
	Set("f_pp_moon_opacity",  weight_night);
    Set("f_pp_hdr_intensity_stars", weight_night);
    Set("f_pp_night_sky", weight_night);

	float night_lights = 1.0 - clamp(f_game_time / DAYTIME_NIGHT_END);
	float night_lights = max(weight_dusk_end_2_night_start, night_lights);
	Set("f_pp_night_lights", night_lights * night_lights);

	vec3 scattering_l_night			= [17.68, 18.04, 18.04] * weight_night;
	vec3 scattering_l_dawn_start	= [12.22, 13.88, 14.68] * weight_dawn_start;
	vec3 scattering_l_dawn			= [7.22, 6.84, 6.46] * weight_dawn;
	vec3 scattering_l_dawn_end		= [6.22, 5.0, 4.1] * weight_dawn_end;
	vec3 scattering_l_day			= [5.5, 4.4, 3.3] * weight_day;
	vec3 scattering_l_dusk_start	= [6.22, 5.84, 5.46] * weight_dusk_start;
	vec3 scattering_l_dusk			= [7.22, 6.84, 6.46] * weight_dusk;
	vec3 scattering_l_dusk_end		= [15.88, 17.28, 18.84] * weight_dusk_end;
	vec3 scattering_l = scattering_l_night + scattering_l_dawn_start + scattering_l_dawn + scattering_l_dawn_end + scattering_l_day + scattering_l_dusk_start + scattering_l_dusk + scattering_l_dusk_end;
	// vec3 scattering_l = scattering_l * weight_rain_inv + [6.8, 5.5, 4.5] * weight_rain;
	vec3 scattering_l = scattering_l * weight_cloudsrain_inv + [6.8, 5.5, 4.5] * weight_cloudsrain;
	vec3 scattering_l = scattering_l * weight_fog_inv + [5.0, 5.0, 5.0] * weight_fog;
	Set("v_pp_scattering_input_lambda", scattering_l);

	vec3 scattering_k_night			= [0.0, 0.0, 0.0] * weight_night;
	vec3 scattering_k_dawn_start	= [0.0, 0.0, 0.0] * weight_dawn_start;
	vec3 scattering_k_dawn			= [0.642, 0.424, 0.175] * weight_dawn;//0.424 0.424 0.175
	vec3 scattering_k_dawn_end		= [1.0, 0.445, 0.323] * weight_dawn_end;
	vec3 scattering_k_day			= [0.971, 0.55, 0.021] * weight_day;
	vec3 scattering_k_dusk_start	= [1.0, 0.586, 0.04] * weight_dusk_start; // 1.0, 0.5, 0.04
	vec3 scattering_k_dusk			= [1.0, 0.432, 0.04] * weight_dusk;
	vec3 scattering_k_dusk_end		= [0.0, 0.0, 0.0] * weight_dusk_end;
	vec3 scattering_k = scattering_k_night + scattering_k_dawn_start + scattering_k_dawn + scattering_k_dawn_end + scattering_k_day + scattering_k_dusk_start + scattering_k_dusk + scattering_k_dusk_end;
	// vec3 scattering_k = scattering_k * weight_rain_inv + [0.686, 0.678, 0.666] * weight_rain;
	vec3 scattering_k = scattering_k * weight_cloudsrain_inv + [0.686, 0.678, 0.666] * weight_cloudsrain;
	vec3 scattering_k = scattering_k * weight_fog_inv + [0.678, 0.678, 0.678] * weight_fog;
	Set("v_pp_scattering_input_k", scattering_k);

	float scattering_n = 1.0003;
	float scattering_n_fog = 1.015;
	float scattering_n_fog_weight = clamp(weight_fog * weight_fog);
	float scattering_n = scattering_n * (1.0 - scattering_n_fog_weight) + scattering_n_fog * scattering_n_fog_weight;
	Set("f_pp_scattering_input_n", scattering_n);

	Set("f_pp_scattering_input_v", 4.0); //Junge's exponent
	Set("f_pp_scattering_input_m", 0.001545);
	Set("f_pp_scattering_input_pn", 0.035);
	Set("f_pp_scattering_input_c", 0.2);
	Set("f_pp_scattering_input_z", 1.0);


	float scattering_turbidity = 1.0;
	float scattering_turbidity_rain = 1.25;
	float scattering_turbidity_rain_weight = clamp(weight_cloudsrain * weight_cloudsrain * weight_cloudsrain);

	float scattering_turbidity = scattering_turbidity * (1.0 - scattering_turbidity_rain_weight) + scattering_turbidity_rain * scattering_turbidity_rain_weight;
	Set("f_pp_scattering_input_mie_turbidity", scattering_turbidity);

	Set("f_pp_scattering_input_ray_intensity", 1.0);
	Set("f_pp_scattering_input_mie_intensity", 1.0);

	float scattering_sun_brightness = 30.0;
	float scattering_sun_brightness_night_rain = 0.25;
	float scattering_sun_brightness_fog = 10.0;

	float scattering_sun_brightness_night_weight = clamp(weight_dusk * 0.75 + weight_dusk_end + weight_night + weight_dawn_start + weight_dawn * 0.75);
	float scattering_sun_brightness_night_weight_inv = 1.0 - scattering_sun_brightness_night_weight;

	float scattering_sun_brightness_fog = scattering_sun_brightness_night_weight_inv * scattering_sun_brightness_fog; //0.0 at night
	
	float scattering_sun_brightness_fog_weight = pow(clamp(weight_fog * 4.0), (1.0 - scattering_sun_brightness_night_weight_inv) * 0.9 + 0.1);

	float scattering_sun_brightness_fog_weight = clamp(3.0 * pow(scattering_sun_brightness_fog_weight, 2.0) - 2.0 * pow(scattering_sun_brightness_fog_weight, 3.0));

	float scattering_sun_brightness_night_rain_weight = pow(scattering_sun_brightness_night_weight * weight_clouds, 0.1);
	float scattering_sun_brightness = scattering_sun_brightness * (1.0 - scattering_sun_brightness_night_rain_weight) + scattering_sun_brightness_night_rain * scattering_sun_brightness_night_rain_weight;

	float scattering_sun_brightness = scattering_sun_brightness * (1.0 - scattering_sun_brightness_fog_weight) + scattering_sun_brightness_fog * scattering_sun_brightness_fog_weight;

	extern float f_ed_pp_dev_ambient_on;
	Set("f_pp_scattering_sun_brightness", scattering_sun_brightness * interior_inv * (1.0 - f_ed_pp_dev_ambient_on));
	
	float scattering_g = 0.7;
	float scattering_g_fog = 0.25;
	float scattering_g_rain = 0.2;
	float scattering_g = scattering_g * weight_fog_inv + scattering_g_fog * weight_fog;
	float scattering_g = scattering_g * weight_cloudsrain_inv + scattering_g_rain * weight_cloudsrain;
	Set("f_pp_scattering_input_mie_g", scattering_g);

	//Set("f_fog_bright", weight_dusk_start * 0.5);
	Set("f_fog_bright", 0.0);

	extern float f_pp_hdr_intensity_shading_sun;
	float sun_shading_intensity_fog = f_pp_hdr_intensity_shading_sun * 0.85;
	float sun_shading_intensity = f_pp_hdr_intensity_shading_sun * weight_fog_inv + sun_shading_intensity_fog * weight_fog;
	Set("f_pp_hdr_intensity_shading_sun", sun_shading_intensity);

////////////////
	//bokeh
	extern float f_bokeh_lum_threshold;
	float bokeh_int_day = f_bokeh_lum_threshold * (weight_dawn + weight_dawn_end + weight_day + weight_dusk_start + weight_dusk);
	float bokeh_int_night = f_bokeh_lum_threshold * 0.5 * (weight_night + weight_dusk_end + weight_dawn_start);

	Set("f_bokeh_lum_threshold", bokeh_int_day + bokeh_int_night);

	float sun_flare_dawn_bias = 0.1;
	float sun_flare_dusk_bias = 0.3;
    float sun_flare_intensity = clamp(clamp(clamp(weight_dawn_end - sun_flare_dawn_bias) + weight_day + clamp(weight_dusk_start - sun_flare_dusk_bias)) * 1000.0);
	float sun_flare_intensity = sun_flare_intensity * weight_fog_inv;
	float sun_flare_intensity = sun_flare_intensity * interior_inv;
	float sun_flare_intensity = (weight_clouds_inv > 0.0) ? sun_flare_intensity : 0.0;
	Set("f_sun_flare_intensity", sun_flare_intensity);
	Set("f_pp_sun_flare_on", sun_flare_intensity);

	Set("f_sun_glow_radius", 5500.0);
	Set("f_sun_glow_range", 5000.0);
	Set("f_sun_glow_rotation_speed", 0.5);
	Set("f_sun_glow_rotation_offset", 10.0);

	float sun_glow_near_fog = 15000.0;
	float sun_glow_near = 30000.0;
	float sun_glow_near = sun_glow_near * weight_fog_inv + sun_glow_near_fog * weight_fog;
	Set("f_sun_glow_near", sun_glow_near);

	vec3 sun_glow_color_night = [0.0, 0.0, 0.0] * weight_night;
	vec3 sun_glow_color_dawn_start = [0.0, 0.0, 0.0] * weight_dawn_start;
	vec3 sun_glow_color_dawn = [0.517647, 0.309804, 0.000000] * weight_dawn;
	vec3 sun_glow_color_dawn_end = [0.447059, 0.466667, 0.611765] * weight_dawn_end;
	vec3 sun_glow_color_day = [0.447059, 0.466667, 0.611765] * weight_day;
	vec3 sun_glow_color_dusk_start = [0.447059, 0.466667, 0.611765] * weight_dusk_start;
	vec3 sun_glow_color_dusk = [0.517647, 0.309804, 0.000000] * weight_dusk;
	vec3 sun_glow_color_dusk_end = [0.0, 0.0, 0.0] * weight_dusk_end;
	vec3 sun_glow_color = sun_glow_color_night + sun_glow_color_dawn_start + sun_glow_color_dawn + sun_glow_color_dawn_end + sun_glow_color_day + sun_glow_color_dusk_start + sun_glow_color_dusk + sun_glow_color_dusk_end;
	// vec3 sun_glow_color = sun_glow_color * weight_clouds_inv;
	vec3 sun_glow_color = sun_glow_color * pow(clamp(weight_fog_inv * 2.0), 0.5) * weight_rain_inv;
	Set("v_sun_glow_color", sun_glow_color);

	Set("f_pp_sun_face_scale", 166.0);

	extern float f_dust_amount;
	float dust_amout = f_dust_amount;
	extern float f_pp_wind_power_current;
	float dust_amout = dust_amout * pow(f_pp_wind_power_current, 0.5);
	float dust_amout = dust_amout * pow(min(weight_wet_inv, weight_fog_inv), 0.5);
	float dust_amout = dust_amout * interior_inv;
	Set("f_pp_dust_amount", dust_amout);

	extern float f_rain_strength;
	extern float f_rain_reflection_strength;
	extern float f_rain_drops_strength;
	extern float f_rain_drops_extent;

	Set("f_pp_rain", weight_rain);
	Set("f_pp_rain_reflection", weight_rain); //TODO: parowanie -> logic script
	Set("f_pp_rain_drops", weight_rain * weight_rain);
	Set("f_pp_rain_drops_strength", 1.0);
	Set("f_pp_rain_drops_extent", f_rain_drops_extent);

	Set("f_pp_rain_smudge_opacity",  weight_storm * interior_inv);

    extern float f_pp_auto_exposure_key_value;
	float exposure_key_value_fog = 0.36;
	float exposure_key_value_weight_fog = clamp(weight_fog * weight_fog * weight_fog);
	float exposure_key_value_inv_sqr = exposure_key_value_fog * exposure_key_value_weight_fog + f_pp_auto_exposure_key_value * (1.0 - exposure_key_value_weight_fog);
    Set("f_pp_auto_exposure_key_value", exposure_key_value_inv_sqr);
}
