/*
  This script defines up to 26 light types

  format:
  Light(string light_type, string light_class)
  where
  light_type: name of the type (user specified)
  light_class: class of the light (dir, omni, spot, envprobe, lightmap, box)

  First 6 types are defined as follows (the type name is the class name):

  Light("envprobe", "envprobe");
  Light("lightmap", "lightmap");
  Light("sun", "dir");
  Light("dir", "dir");
  Light("omni", "omni");
  Light("spot", "spot");

  LightMaterial(string light_type, string material_name, string stencil_material_name);
  where
    light_type: name of the type (user specified)
    material_name: material used to render the light
    stencil_material_name: material used to render the light using stencil optimizations


  LightParams(string light_type, string flags, bool cast_shadows, bool use_projector, bool gen_cubemap, bool update_mask, bool sun_connected);
  where
    light_type: name of the type (user specified)
    flags: currently only "fade_to_white" is implemented
    cast_shadows: this type of lights casts shadows
    use_projector: this type of lights uses projectors
    gen_cubemap: this type of lights is included in editor process of cubemap generation
    update_mask: add light to the cumulative stencil mask when true
    sun_connected: light type is connected to sun lighting
*/

sub main()
{  
    // IMPORTANT! This file must be synchronized with ELightType enum!
    // IMPORTANT! Always inform the nearest engine programmer about the changes!

    Light("omniproj",           "omni"); 
    Light("spot_shadow",        "spot");
    Light("volume",             "box");
    Light("sun_omni",           "omni"); 
    Light("sun_omniproj",       "omni"); 
    Light("sun_spot",           "spot");
    Light("sun_spot_shadow",    "spot");
    Light("sun_volume",         "box");
    Light("envprobe_blend",     "envprobe");
    Light("envprobe_blend_z",   "envprobe");
    Light("dim_omni",           "omni");
    Light("dim_box",            "box");
    Light("dim_corner",         "box");
    Light("dim_volume",         "box");
    Light("dim_cylinder",       "box");

    LightMaterial("envprobe",           "light_envprobe.mat",           "light_envprobe_stencil.mat"           );
    LightMaterial("envprobe_blend",     "light_envprobe_blend.mat",     "light_envprobe_blend_stencil.mat"     );
    LightMaterial("envprobe_blend_z",   "light_envprobe_blend_z.mat",   "light_envprobe_blend_z_stencil.mat"   );
    LightMaterial("omni",               "light_omni.mat",               "light_omni_stencil.mat"               );
    LightMaterial("omniproj",           "light_omniproj.mat",           "light_omniproj_stencil.mat"           );
    LightMaterial("spot",               "light_spot.mat",               "light_spot_stencil.mat"               );
    LightMaterial("spot_shadow",        "light_spot_shadow.mat",        "light_spot_shadow_stencil.mat"        );
    LightMaterial("volume",             "light_volume.mat",             "light_volume_stencil.mat"             );
    LightMaterial("sun_omni",           "sun_light_omni.mat",           "sun_light_omni_stencil.mat"           );
    LightMaterial("sun_omniproj",       "sun_light_omniproj.mat",       "sun_light_omniproj_stencil.mat"       );
    LightMaterial("sun_spot",           "sun_light_spot.mat",           "sun_light_spot_stencil.mat"           );
    LightMaterial("sun_spot_shadow",    "sun_light_spot_shadow.mat",    "sun_light_spot_shadow_stencil.mat"    );
    LightMaterial("sun_volume",         "sun_light_volume.mat",         "sun_light_volume_stencil.mat"         );
    LightMaterial("dim_omni",           "light_dim_omni.mat",           "light_dim_omni_stencil.mat"           );
    LightMaterial("dim_box",            "light_dim_box.mat",            "light_dim_box_stencil.mat"            );
    LightMaterial("dim_corner",         "light_dim_corner.mat",         "light_dim_corner_stencil.mat"         );
    LightMaterial("dim_volume",         "light_dim_volume.mat",         "light_dim_volume_stencil.mat"         );
    LightMaterial("dim_cylinder",       "light_dim_cylinder.mat",       "light_dim_cylinder_stencil.mat"       );

    // LightParams(string light_type, string flags, bool cast_shadows, bool use_projector, bool gen_cubemap, bool update_mask, bool sun_connected);
    LightParams("lightmap", "",         false, false, false, false, false);
    LightParams("sun", "",              true , false, false, false, true );
    LightParams("dir", "",              true , false, false, false, false);
    LightParams("omni", "",             false, false, false, false, false);
    LightParams("omniproj", "",         false, true , false, false, false);
    LightParams("spot", "",             false, true , false, false, false);
    LightParams("spot_shadow", "",      true , true , false, false, false);
    LightParams("volume", "",           false, true , false, false, false);
    LightParams("sun_omni", "",         false, false, false, false, true );
    LightParams("sun_omniproj", "",     false, true , false, false, true );
    LightParams("sun_spot", "",         false, true , false, false, true );
    LightParams("sun_spot_shadow", "",  true , true , false, false, true );
    LightParams("sun_volume", "",       false, true , false, false, true );
    LightParams("envprobe", "",         false, false, true , true , false);
    LightParams("envprobe_blend", "",   false, true , true , false, false);
    LightParams("envprobe_blend_z", "", false, true , true , false, false);
    
    LightParams("dim_omni", "fade_to_white",         false, false, false, false, false);
    LightParams("dim_box", "fade_to_white",          false, false, false, false, false);
    LightParams("dim_corner", "fade_to_white",       false, false, false, false, false);
    LightParams("dim_volume", "fade_to_white",       false, false, false, false, false);
    LightParams("dim_cylinder", "fade_to_white",     false, false, false, false, false);

    light_meshes_visualization_mat("light_mesh.mat");

    light_mesh_editor_default("dynamiclight_omni.msh");
    light_mesh_editor("envprobe", "dynamiclight_env_probe.msh");
    light_mesh_editor("envprobe_blend", "dynamiclight_env_probe.msh");
    light_mesh_editor("envprobe_blend_z", "dynamiclight_env_probe.msh");
}
